import{_ as a,c as n,b as l,o as p}from"./chunks/framework.E7rrtXIC.js";const d=JSON.parse('{"title":"URL 对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[{"level":3,"title":"URL.createObjectURL()","slug":"url-createobjecturl","link":"#url-createobjecturl","children":[]},{"level":3,"title":"URL.revokeObjectURL()","slug":"url-revokeobjecturl","link":"#url-revokeobjecturl","children":[]},{"level":3,"title":"URL.canParse()","slug":"url-canparse","link":"#url-canparse","children":[]},{"level":3,"title":"URL.parse()","slug":"url-parse","link":"#url-parse","children":[]}]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"toString()","slug":"tostring","link":"#tostring","children":[]}]}],"relativePath":"basic/webapi/url.md","filePath":"basic/webapi/url.md"}'),o={name:"basic/webapi/url.md"};function e(c,s,t,r,E,i){return p(),n("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/url.md for this page in Markdown format</div><h1 id="url-对象" tabindex="-1">URL 对象 <a class="header-anchor" href="#url-对象" aria-label="Permalink to &quot;URL 对象&quot;">​</a></h1><p>浏览器内置的 URL 对象，代表一个网址。通过这个对象，就能生成和操作网址。</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><p>URL 可以当作构造函数使用，生成一个实例对象。</p><p>它接受一个网址字符串作为参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>如果网址字符串无法解析，它会报错，所以它要放在<code>try...catch</code>代码块里面。</p><p>如果这个参数只是一个网站路径，比如<code>/foo/index.html</code>，那么需要提供基准网址，作为第二个参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;page2.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;http://example.com/page1.html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">url1.href </span><span style="color:#6A737D;">// &quot;http://example.com/page2.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url2</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;..&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;http://example.com/a/b.html&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">url2.href </span><span style="color:#6A737D;">// &quot;http://example.com/&quot;</span></span></code></pre></div><p>这种写法很方便基于现有网址，构造新的 URL。</p><p><code>URL()</code>的参数也可以是另一个 URL 实例。这时，<code>URL()</code>会自动读取该实例的href属性，作为实际参数。</p><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><p>一旦得到了 URL 实例对象，就可以从它的各种属性，方便地获取 URL 的各个组成部分。</p><ul><li>href：完整的网址</li><li>protocol：访问协议，带结尾冒号<code>:</code>。</li><li>search：查询字符串，以问号<code>?</code>开头。</li><li>hash：哈希字符串，以<code>#</code>开头。</li><li>username：需要认证的网址的用户名。</li><li>password：需要认证的网址的密码。</li><li>host：主机名，不带协议，但带有端口。</li><li>hostname：主机名，不带协议和端口。</li><li>port：端口。</li><li>origin：包括协议、域名和端口。</li><li>pathname：服务器路径，以根路径<code>/</code>开头，不带有查询字符串。</li><li>searchParams：指向一个 URLSearchParams 实例，方便用来构造和操作查询字符串。</li></ul><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://user:pass@example.com:8080/resource/path?q=1#hash&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.href </span><span style="color:#6A737D;">// http://user:pass@example.com:8080/resource/path?q=1#hash</span></span>
<span class="line"><span style="color:#E1E4E8;">url.protocol </span><span style="color:#6A737D;">// http:</span></span>
<span class="line"><span style="color:#E1E4E8;">url.username </span><span style="color:#6A737D;">// user</span></span>
<span class="line"><span style="color:#E1E4E8;">url.password </span><span style="color:#6A737D;">// pass</span></span>
<span class="line"><span style="color:#E1E4E8;">url.host </span><span style="color:#6A737D;">// example.com:8080</span></span>
<span class="line"><span style="color:#E1E4E8;">url.hostname </span><span style="color:#6A737D;">// example.com</span></span>
<span class="line"><span style="color:#E1E4E8;">url.port </span><span style="color:#6A737D;">// 8080</span></span>
<span class="line"><span style="color:#E1E4E8;">url.pathname </span><span style="color:#6A737D;">// /resource/path</span></span>
<span class="line"><span style="color:#E1E4E8;">url.search </span><span style="color:#6A737D;">// ?q=1</span></span>
<span class="line"><span style="color:#E1E4E8;">url.hash </span><span style="color:#6A737D;">// #hash</span></span>
<span class="line"><span style="color:#E1E4E8;">url.origin </span><span style="color:#6A737D;">// http://example.com:8080</span></span></code></pre></div><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写，并且会立即生效。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://example.com/index.html#part1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.pathname </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;index2.html&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.href </span><span style="color:#6A737D;">// &quot;http://example.com/index2.html#part1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.hash </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;#part2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.href </span><span style="color:#6A737D;">// &quot;http://example.com/index2.html#part2&quot;</span></span></code></pre></div><p>上面示例中，改变 URL 实例的<code>pathname</code>属性和<code>hash</code>属性，都会实时反映在 URL 实例当中。</p><p>下面是<code>searchParams</code>属性的用法示例，它的具体属性和方法介绍参见 《URLSearchParams》一章。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://example.com/path?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.searchParams.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">url.searchParams.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">k</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">v</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> url.searchParams) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(k, v);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// a 1</span></span>
<span class="line"><span style="color:#6A737D;">// b 2</span></span></code></pre></div><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h3 id="url-createobjecturl" tabindex="-1">URL.createObjectURL() <a class="header-anchor" href="#url-createobjecturl" aria-label="Permalink to &quot;URL.createObjectURL()&quot;">​</a></h3><p><code>URL.createObjectURL()</code>方法用来为文件数据生成一个临时网址（URL 字符串），供那些需要网址作为参数的方法使用。该方法的参数必须是 Blob 类型（即代表文件的二进制数据）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;display&quot;/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;input</span></span>
<span class="line"><span style="color:#6A737D;">//   type=&quot;file&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   id=&quot;fileElem&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   multiple</span></span>
<span class="line"><span style="color:#6A737D;">//   accept=&quot;image/*&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   onchange=&quot;handleFiles(this.files)&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//  &gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> div</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;display&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleFiles</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">files</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> files.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(files[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(img);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面示例中，<code>URL.createObjectURL()</code>方法用来为上传的文件生成一个临时网址，作为<code>&lt;img&gt;</code>元素的图片来源。</p><p>该方法生成的 URL 就像下面的样子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">blob</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost/c745ef73-ece9-46da-8f66-ebes574789b1</span></span></code></pre></div><p>注意，每次使用<code>URL.createObjectURL()</code>方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的临时网址，为了节省内存，可以使用<code>URL.revokeObjectURL()</code>方法释放这个实例。</p><p>下面是生成 Worker 进程的一个示例。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;code&#39;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  postMessage(&#39;foo&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;code&#39;</span><span style="color:#E1E4E8;">).textContent;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> blob </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Blob</span><span style="color:#E1E4E8;">([code], { type: </span><span style="color:#9ECBFF;">&#39;application/javascript&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> worker </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Worker</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#79B8FF;">  URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">revokeObjectURL</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  worker.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;worker returned: &#39;</span><span style="color:#E1E4E8;">, e.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="url-revokeobjecturl" tabindex="-1">URL.revokeObjectURL() <a class="header-anchor" href="#url-revokeobjecturl" aria-label="Permalink to &quot;URL.revokeObjectURL()&quot;">​</a></h3><p><code>URL.revokeObjectURL()</code>方法用来释放<code>URL.createObjectURL()</code>生成的临时网址。它的参数就是<code>URL.createObjectURL()</code>方法返回的 URL 字符串。</p><p>下面为上一小节的示例加上<code>URL.revokeObjectURL()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;display&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleFiles</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">files</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> files.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(files[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(img);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.</span><span style="color:#B392F0;">onload</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      window.</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">revokeObjectURL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.src);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，一旦图片加载成功以后，为本地文件生成的临时网址就没用了，于是可以在<code>img.onload</code>回调函数里面，通过<code>URL.revokeObjectURL()</code>方法释放资源。</p><h3 id="url-canparse" tabindex="-1">URL.canParse() <a class="header-anchor" href="#url-canparse" aria-label="Permalink to &quot;URL.canParse()&quot;">​</a></h3><p><code>URL()</code>构造函数解析非法网址时，会抛出错误，必须用<code>try...catch</code>代码块处理，这样终究不是非常方便。因此，URL 对象又引入了<code>URL.canParse()</code>方法，它返回一个布尔值，表示当前字符串是否为有效网址。</p><div class="language-javascipt"><button title="Copy Code" class="copy"></button><span class="lang">javascipt</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>URL.canParse(url)</span></span>
<span class="line"><span>URL.canParse(url, base)</span></span></code></pre></div><p><code>URL.canParse()</code>可以接受两个参数。</p><ul><li><code>url</code>：字符串或者对象（比如<code>&lt;a&gt;</code>元素的 DOM 对象），表示 URL。</li><li><code>base</code>：字符串或者 URL 实例对象，表示 URL 的基准位置。它是可选参数，当第一个参数<code>url</code>为相对 URL 时，会使用这个参数，计算出完整的 URL，再进行判断。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canParse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://developer.mozilla.org/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canParse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/en-US/docs&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canParse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/en-US/docs&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://developer.mozilla.org/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面示例中，如果第一个参数是相对 URL，这时必须要有第二个参数，否则返回<code>false</code>。</p><p>下面的示例是第二个参数为 URL 实例对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> baseUrl </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://developer.mozilla.org/&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;/en-US/docs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canParse</span><span style="color:#E1E4E8;">(url, baseUrl) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>该方法内部使用<code>URL()</code>构造方法相同的解析算法，因此可以用<code>URL()</code>构造方法代替。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isUrlValid</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(string);</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面示例中，给出了<code>URL.canParse()</code>的替代实现<code>isUrlValid()</code>。</p><h3 id="url-parse" tabindex="-1">URL.parse() <a class="header-anchor" href="#url-parse" aria-label="Permalink to &quot;URL.parse()&quot;">​</a></h3><p><code>URL.parse()</code>是一个新添加的方法，Chromium 126 和 Firefox 126 开始支持。</p><p>它的主要目的就是，改变<code>URL()</code>构造函数解析非法网址抛错的问题。这个新方法不会抛错，如果参数是有效网址，则返回 URL 实例对象，否则返回<code>null</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> urlstring</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;this is not a URL&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> not_a_url</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(urlstring); </span><span style="color:#6A737D;">// null</span></span></code></pre></div><p>上面示例中，<code>URL.parse()</code>的参数不是有效网址，所以返回<code>null</code>。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h3><p>URL 实例对象的<code>toString()</code>返回<code>URL.href</code>属性，即整个网址。</p>`,57)])])}const F=a(o,[["render",e]]);export{d as __pageData,F as default};
