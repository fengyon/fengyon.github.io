import{_ as a,c as n,o as l,b as p}from"./chunks/framework.3z4p0y-m.js";const d=JSON.parse('{"title":"Canvas API","description":"","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Canvas API：绘制图形","slug":"canvas-api-绘制图形","link":"#canvas-api-绘制图形","children":[{"level":3,"title":"路径","slug":"路径","link":"#路径","children":[]},{"level":3,"title":"线型","slug":"线型","link":"#线型","children":[]},{"level":3,"title":"矩形","slug":"矩形","link":"#矩形","children":[]},{"level":3,"title":"弧线","slug":"弧线","link":"#弧线","children":[]},{"level":3,"title":"文本","slug":"文本","link":"#文本","children":[]},{"level":3,"title":"渐变色和图像填充","slug":"渐变色和图像填充","link":"#渐变色和图像填充","children":[]},{"level":3,"title":"阴影","slug":"阴影","link":"#阴影","children":[]}]},{"level":2,"title":"Canvas API：图像处理","slug":"canvas-api-图像处理","link":"#canvas-api-图像处理","children":[{"level":3,"title":"CanvasRenderingContext2D.drawImage()","slug":"canvasrenderingcontext2d-drawimage","link":"#canvasrenderingcontext2d-drawimage","children":[]},{"level":3,"title":"像素读写","slug":"像素读写","link":"#像素读写","children":[]},{"level":3,"title":"CanvasRenderingContext2D.save()，CanvasRenderingContext2D.restore()","slug":"canvasrenderingcontext2d-save-canvasrenderingcontext2d-restore","link":"#canvasrenderingcontext2d-save-canvasrenderingcontext2d-restore","children":[]},{"level":3,"title":"CanvasRenderingContext2D.canvas","slug":"canvasrenderingcontext2d-canvas","link":"#canvasrenderingcontext2d-canvas","children":[]},{"level":3,"title":"图像变换","slug":"图像变换","link":"#图像变换","children":[]}]},{"level":2,"title":"<canvas> 元素的方法","slug":"canvas-元素的方法","link":"#canvas-元素的方法","children":[{"level":3,"title":"HTMLCanvasElement.toDataURL()","slug":"htmlcanvaselement-todataurl","link":"#htmlcanvaselement-todataurl","children":[]},{"level":3,"title":"HTMLCanvasElement.toBlob()","slug":"htmlcanvaselement-toblob","link":"#htmlcanvaselement-toblob","children":[]}]},{"level":2,"title":"Canvas 使用实例","slug":"canvas-使用实例","link":"#canvas-使用实例","children":[{"level":3,"title":"动画效果","slug":"动画效果","link":"#动画效果","children":[]},{"level":3,"title":"像素处理","slug":"像素处理","link":"#像素处理","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"basic/webapi/canvas.md","filePath":"basic/webapi/canvas.md"}'),o={name:"basic/webapi/canvas.md"};function e(c,s,t,E,r,y){return l(),n("div",null,[...s[0]||(s[0]=[p(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/canvas.md for this page in Markdown format</div><h1 id="canvas-api" tabindex="-1">Canvas API <a class="header-anchor" href="#canvas-api" aria-label="Permalink to &quot;Canvas API&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><code>&lt;canvas&gt;</code>元素用于生成图像。它本身就像一个画布，JavaScript 通过操作它的 API，在上面生成图像。它的底层是一个个像素，基本上<code>&lt;canvas&gt;</code>是一个可以用 JavaScript 操作的位图（bitmap）。</p><p>它与 SVG 图像的区别在于，<code>&lt;canvas&gt;</code>是脚本调用各种方法生成图像，SVG 则是一个 XML 文件，通过各种子元素生成图像。</p><p>使用 Canvas API 之前，需要在网页里面新建一个<code>&lt;canvas&gt;</code>元素。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">canvas</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;myCanvas&quot;</span><span style="color:#B392F0;"> width</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;400&quot;</span><span style="color:#B392F0;"> height</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;250&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  您的浏览器不支持 Canvas</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">canvas</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果浏览器不支持这个 API，就会显示<code>&lt;canvas&gt;</code>标签中间的文字：“您的浏览器不支持 Canvas”。</p><p>每个<code>&lt;canvas&gt;</code>元素都有一个对应的<code>CanvasRenderingContext2D</code>对象（上下文对象）。Canvas API 就定义在这个对象上面。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，<code>&lt;canvas&gt;</code>元素节点对象的<code>getContext()</code>方法，返回的就是<code>CanvasRenderingContext2D</code>对象。</p><p>注意，Canvas API 需要<code>getContext</code>方法指定参数<code>2d</code>，表示该<code>&lt;canvas&gt;</code>节点生成 2D 的平面图像。如果参数是<code>webgl</code>，就表示用于生成 3D 的立体图案，这部分属于 WebGL API。</p><p>按照用途，Canvas API 分成两大部分：绘制图形和图像处理。</p><h2 id="canvas-api-绘制图形" tabindex="-1">Canvas API：绘制图形 <a class="header-anchor" href="#canvas-api-绘制图形" aria-label="Permalink to &quot;Canvas API：绘制图形&quot;">​</a></h2><p>Canvas 画布提供了一个作图的平面空间，该空间的每个点都有自己的坐标。原点<code>(0, 0)</code>位于图像左上角，<code>x</code>轴的正向是原点向右，<code>y</code>轴的正向是原点向下。</p><h3 id="路径" tabindex="-1">路径 <a class="header-anchor" href="#路径" aria-label="Permalink to &quot;路径&quot;">​</a></h3><p>以下方法和属性用来绘制路径。</p><ul><li><code>CanvasRenderingContext2D.beginPath()</code>：开始绘制路径。</li><li><code>CanvasRenderingContext2D.closePath()</code>：结束路径，返回到当前路径的起始点，会从当前点到起始点绘制一条直线。如果图形已经封闭，或者只有一个点，那么此方法不会产生任何效果。</li><li><code>CanvasRenderingContext2D.moveTo()</code>：设置路径的起点，即将一个新路径的起始点移动到<code>(x，y)</code>坐标。</li><li><code>CanvasRenderingContext2D.lineTo()</code>：使用直线从当前点连接到<code>(x, y)</code>坐标。</li><li><code>CanvasRenderingContext2D.fill()</code>：在路径内部填充颜色（默认为黑色）。</li><li><code>CanvasRenderingContext2D.stroke()</code>：路径线条着色（默认为黑色）。</li><li><code>CanvasRenderingContext2D.fillStyle</code>：指定路径填充的颜色和样式（默认为黑色）。</li><li><code>CanvasRenderingContext2D.strokeStyle</code>：指定路径线条的颜色和样式（默认为黑色）。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">lineTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">lineTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码只是确定了路径的形状，画布上还看不出来，因为没有颜色。所以还需要着色。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 或者</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p>上面代码中，这两个方法都可以使得路径可见。<code>fill()</code>在路径内部填充颜色，使之变成一个实心的图形；<code>stroke()</code>只对路径线条着色。</p><p>这两个方法默认都是使用黑色，可以使用<code>fillStyle</code>和<code>strokeStyle</code>属性指定其他颜色。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;red&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 或者</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.strokeStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;red&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面代码将填充和线条的颜色指定为红色。</p><h3 id="线型" tabindex="-1">线型 <a class="header-anchor" href="#线型" aria-label="Permalink to &quot;线型&quot;">​</a></h3><p>以下的方法和属性控制线条的视觉特征。</p><ul><li><code>CanvasRenderingContext2D.lineWidth</code>：指定线条的宽度，默认为1.0。</li><li><code>CanvasRenderingContext2D.lineCap</code>：指定线条末端的样式，有三个可能的值：<code>butt</code>（默认值，末端为矩形）、<code>round</code>（末端为圆形）、<code>square</code>（末端为突出的矩形，矩形宽度不变，高度为线条宽度的一半）。</li><li><code>CanvasRenderingContext2D.lineJoin</code>：指定线段交点的样式，有三个可能的值：<code>round</code>（交点为扇形）、<code>bevel</code>（交点为三角形底边）、<code>miter</code>（默认值，交点为菱形)。</li><li><code>CanvasRenderingContext2D.miterLimit</code>：指定交点菱形的长度，默认为10。该属性只在<code>lineJoin</code>属性的值等于<code>miter</code>时有效。</li><li><code>CanvasRenderingContext2D.getLineDash()</code>：返回一个数组，表示虚线里面线段和间距的长度。</li><li><code>CanvasRenderingContext2D.setLineDash()</code>：数组，用于指定虚线里面线段和间距的长度。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">lineTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">lineTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.lineWidth </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.lineCap </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;round&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.lineJoin </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;round&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">setLineDash</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面代码中，线条的宽度为3，线条的末端和交点都改成圆角，并且设置为虚线。</p><h3 id="矩形" tabindex="-1">矩形 <a class="header-anchor" href="#矩形" aria-label="Permalink to &quot;矩形&quot;">​</a></h3><p>以下方法用来绘制矩形。</p><ul><li><code>CanvasRenderingContext2D.rect()</code>：绘制矩形路径。</li><li><code>CanvasRenderingContext2D.fillRect()</code>：填充一个矩形。</li><li><code>CanvasRenderingContext2D.strokeRect()</code>：绘制矩形边框。</li><li><code>CanvasRenderingContext2D.clearRect()</code>：指定矩形区域的像素都变成透明。</li></ul><p>上面四个方法的格式都一样，都接受四个参数，分别是矩形左上角的横坐标和纵坐标、矩形的宽和高。</p><p><code>CanvasRenderingContext2D.rect()</code>方法用于绘制矩形路径。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">rect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面代码绘制一个正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p><p><code>CanvasRenderingContext2D.fillRect()</code>用来向一个矩形区域填充颜色。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;green&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码绘制一个绿色的正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p><p><code>CanvasRenderingContext2D.strokeRect()</code>用来绘制一个矩形区域的边框。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.strokeStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;green&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">strokeRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码绘制一个绿色的空心正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p><p><code>CanvasRenderingContext2D.clearRect()</code>用于擦除指定矩形区域的像素颜色，等同于把早先的绘制效果都去除。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">clearRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">90</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">90</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码先绘制一个 100 x 100 的正方形，然后在它的内部擦除 90 x 90 的区域，等同于形成了一个5像素宽度的边框。</p><h3 id="弧线" tabindex="-1">弧线 <a class="header-anchor" href="#弧线" aria-label="Permalink to &quot;弧线&quot;">​</a></h3><p>以下方法用于绘制弧形。</p><ul><li><code>CanvasRenderingContext2D.arc()</code>：通过指定圆心和半径绘制弧形。</li><li><code>CanvasRenderingContext2D.arcTo()</code>：通过指定两根切线和半径绘制弧形。</li></ul><p><code>CanvasRenderingContext2D.arc()</code>主要用来绘制圆形或扇形。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 格式</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">arc</span><span style="color:#E1E4E8;">(x, y, radius, startAngle, endAngle, anticlockwise)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">arc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;"> *</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p><code>arc()</code>方法的<code>x</code>和<code>y</code>参数是圆心坐标，<code>radius</code>是半径，<code>startAngle</code>和<code>endAngle</code>则是扇形的起始角度和终止角度（以弧度表示），<code>anticlockwise</code>表示做图时应该逆时针画（<code>true</code>）还是顺时针画（<code>false</code>），这个参数用来控制扇形的方向（比如上半圆还是下半圆）。</p><p>下面是绘制实心圆形的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">arc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#F97583;"> *</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面代码绘制了一个半径50，起始角度为0，终止角度为 2 * PI 的完整的圆。</p><p>绘制空心半圆的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">arc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p><code>CanvasRenderingContext2D.arcTo()</code>方法主要用来绘制圆弧，需要给出两个点的坐标，当前点与第一个点形成一条直线，第一个点与第二个点形成另一条直线，然后画出与这两根直线相切的弧线。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">arcTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">lineTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面代码中，<code>arcTo()</code>有5个参数，前两个参数是第一个点的坐标，第三个参数和第四个参数是第二个点的坐标，第五个参数是半径。然后，<code>(0, 0)</code>与<code>(50, 50)</code>形成一条直线，然后<code>(50, 50)</code>与<code>(100, 0)</code>形成第二条直线。弧线就是与这两根直线相切的部分。</p><h3 id="文本" tabindex="-1">文本 <a class="header-anchor" href="#文本" aria-label="Permalink to &quot;文本&quot;">​</a></h3><p>以下方法和属性用于绘制文本。</p><ul><li><code>CanvasRenderingContext2D.fillText()</code>：在指定位置绘制实心字符。</li><li><code>CanvasRenderingContext2D.strokeText()</code>：在指定位置绘制空心字符。</li><li><code>CanvasRenderingContext2D.measureText()</code>：返回一个 TextMetrics 对象。</li><li><code>CanvasRenderingContext2D.font</code>：指定字型大小和字体，默认值为<code>10px sans-serif</code>。</li><li><code>CanvasRenderingContext2D.textAlign</code>：文本的对齐方式，默认值为<code>start</code>。</li><li><code>CanvasRenderingContext2D.direction</code>：文本的方向，默认值为<code>inherit</code>。</li><li><code>CanvasRenderingContext2D.textBaseline</code>：文本的垂直位置，默认值为<code>alphabetic</code>。</li></ul><p><code>fillText()</code>方法用来在指定位置绘制实心字符。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">CanvasRenderingContext2D.</span><span style="color:#B392F0;">fillText</span><span style="color:#E1E4E8;">(text, x, y [, maxWidth])</span></span></code></pre></div><p>该方法接受四个参数。</p><ul><li><code>text</code>：所要填充的字符串。</li><li><code>x</code>：文字起点的横坐标，单位像素。</li><li><code>y</code>：文字起点的纵坐标，单位像素。</li><li><code>maxWidth</code>：文本的最大像素宽度。该参数可选，如果省略，则表示宽度没有限制。如果文本实际长度超过这个参数指定的值，那么浏览器将尝试用较小的字体填充。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码在<code>(50, 50)</code>位置写入字符串<code>Hello world</code>。</p><p>注意，<code>fillText()</code>方法不支持文本断行，所有文本一定出现在一行内。如果要生成多行文本，只有调用多次<code>fillText()</code>方法。</p><p><code>strokeText()</code>方法用来添加空心字符，它的参数与<code>fillText()</code>一致。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">strokeText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面这两种方法绘制的文本，默认都是<code>10px</code>大小、<code>sans-serif</code>字体，<code>font</code>属性可以改变字体设置。该属性的值是一个字符串，使用 CSS 的<code>font</code>属性即可。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.font </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Bold 20px Arial&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><code>textAlign</code>属性用来指定文本的对齐方式。它可以取以下几个值。</p><ul><li><code>left</code>：左对齐</li><li><code>right</code>：右对齐</li><li><code>center</code>：居中</li><li><code>start</code>：默认值，起点对齐（从左到右的文本为左对齐，从右到左的文本为右对齐）。</li><li><code>end</code>：结尾对齐（从左到右的文本为右对齐，从右到左的文本为左对齐）。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.font </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Bold 20px Arial&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.textAlign </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;center&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><code>direction</code>属性指定文本的方向，默认值为<code>inherit</code>，表示继承<code>&lt;canvas&gt;</code>或<code>document</code>的设置。其他值包括<code>ltr</code>（从左到右）和<code>rtl</code>（从右到左）。</p><p><code>textBaseline</code>属性指定文本的垂直位置，可以取以下值。</p><ul><li><code>top</code>：上部对齐（字母的基线是整体上移）。</li><li><code>hanging</code>：悬挂对齐（字母的上沿在一根直线上），适用于印度文和藏文。</li><li><code>middle</code>：中部对齐（字母的中线在一根直线上）。</li><li><code>alphabetic</code>：默认值，表示字母位于字母表的正常位置（四线格的第三根线）。</li><li><code>ideographic</code>：下沿对齐（字母的下沿在一根直线上），使用于东亚文字。</li><li><code>bottom</code>：底部对齐（字母的基线下移）。对于英文字母，这个设置与<code>ideographic</code>没有差异。</li></ul><p><code>measureText()</code>方法接受一个字符串作为参数，返回一个 TextMetrics 对象，可以从这个对象上面获取参数字符串的信息，目前主要是文本渲染后的宽度（<code>width</code>）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> text1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">measureText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">text1.width </span><span style="color:#6A737D;">// 49.46</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.font </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Bold 20px Arial&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> text2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">measureText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">text2.width </span><span style="color:#6A737D;">// 107.78</span></span></code></pre></div><p>上面代码中，<code>10px</code>大小的字符串<code>Hello world</code>，渲染后宽度为<code>49.46</code>。放大到<code>20px</code>以后，宽度为<code>107.78</code>。</p><h3 id="渐变色和图像填充" tabindex="-1">渐变色和图像填充 <a class="header-anchor" href="#渐变色和图像填充" aria-label="Permalink to &quot;渐变色和图像填充&quot;">​</a></h3><p>以下方法用于设置渐变效果和图像填充效果。</p><ul><li><code>CanvasRenderingContext2D.createLinearGradient()</code>：定义线性渐变样式。</li><li><code>CanvasRenderingContext2D.createRadialGradient()</code>：定义辐射渐变样式。</li><li><code>CanvasRenderingContext2D.createPattern()</code>：定义图像填充样式。</li></ul><p><code>createLinearGradient()</code>方法按照给定直线，生成线性渐变的样式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">createLinearGradient</span><span style="color:#E1E4E8;">(x0, y0, x1, y1)</span></span></code></pre></div><p><code>ctx.createLinearGradient(x0, y0, x1, y1)</code>方法接受四个参数：<code>x0</code>和<code>y0</code>是起点的横坐标和纵坐标，<code>x1</code>和<code>y1</code>是终点的横坐标和纵坐标。通过不同的坐标值，可以生成从上至下、从左到右的渐变等等。</p><p>该方法的返回值是一个<code>CanvasGradient</code>对象，该对象只有一个<code>addColorStop()</code>方向，用来指定渐变点的颜色。<code>addColorStop()</code>方法接受两个参数，第一个参数是0到1之间的一个位置量，0表示起点，1表示终点，第二个参数是一个字符串，表示 CSS 颜色。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> gradient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">createLinearGradient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">gradient.</span><span style="color:#B392F0;">addColorStop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;green&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">gradient.</span><span style="color:#B392F0;">addColorStop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;white&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gradient;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，定义了渐变样式<code>gradient</code>以后，将这个样式指定给<code>fillStyle</code>属性，然后<code>fillRect()</code>就会生成以这个样式填充的矩形区域。</p><p><code>createRadialGradient()</code>方法定义一个辐射渐变，需要指定两个圆。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">createRadialGradient</span><span style="color:#E1E4E8;">(x0, y0, r0, x1, y1, r1)</span></span></code></pre></div><p><code>createRadialGradient()</code>方法接受六个参数，<code>x0</code>和<code>y0</code>是辐射起始的圆的圆心坐标，<code>r0</code>是起始圆的半径，<code>x1</code>和<code>y1</code>是辐射终止的圆的圆心坐标，<code>r1</code>是终止圆的半径。</p><p>该方法的返回值也是一个<code>CanvasGradient</code>对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> gradient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">createRadialGradient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">gradient.</span><span style="color:#B392F0;">addColorStop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;white&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">gradient.</span><span style="color:#B392F0;">addColorStop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;green&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gradient;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，生成辐射样式以后，用这个样式填充一个矩形。</p><p><code>createPattern()</code>方法定义一个图像填充样式，在指定方向上不断重复该图像，填充指定的区域。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">createPattern</span><span style="color:#E1E4E8;">(image, repetition)</span></span></code></pre></div><p>该方法接受两个参数，第一个参数是图像数据，它可以是<code>&lt;img&gt;</code>元素，也可以是另一个<code>&lt;canvas&gt;</code>元素，或者一个表示图像的 Blob 对象。第二个参数是一个字符串，有四个可能的值，分别是<code>repeat</code>（双向重复）、<code>repeat-x</code>(水平重复)、<code>repeat-y</code>(垂直重复)、<code>no-repeat</code>(不重复)。如果第二个参数是空字符串或<code>null</code>，则等同于<code>null</code>。</p><p>该方法的返回值是一个<code>CanvasPattern</code>对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Image</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">img.src </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;https://example.com/pattern.png&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">img.</span><span style="color:#B392F0;">onload</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">( ) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">createPattern</span><span style="color:#E1E4E8;">(img, </span><span style="color:#9ECBFF;">&#39;repeat&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>上面代码中，图像加载成功以后，使用<code>createPattern()</code>生成图像样式，然后使用这个样式填充指定区域。</p><h3 id="阴影" tabindex="-1">阴影 <a class="header-anchor" href="#阴影" aria-label="Permalink to &quot;阴影&quot;">​</a></h3><p>以下属性用于设置阴影。</p><ul><li><code>CanvasRenderingContext2D.shadowBlur</code>：阴影的模糊程度，默认为<code>0</code>。</li><li><code>CanvasRenderingContext2D.shadowColor</code>：阴影的颜色，默认为<code>black</code>。</li><li><code>CanvasRenderingContext2D.shadowOffsetX</code>：阴影的水平位移，默认为<code>0</code>。</li><li><code>CanvasRenderingContext2D.shadowOffsetY</code>：阴影的垂直位移，默认为<code>0</code>。</li></ul><p>下面是一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.shadowOffsetX </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.shadowOffsetY </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.shadowBlur </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.shadowColor </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;rgba(0,0,0,0.5)&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;green&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h2 id="canvas-api-图像处理" tabindex="-1">Canvas API：图像处理 <a class="header-anchor" href="#canvas-api-图像处理" aria-label="Permalink to &quot;Canvas API：图像处理&quot;">​</a></h2><h3 id="canvasrenderingcontext2d-drawimage" tabindex="-1">CanvasRenderingContext2D.drawImage() <a class="header-anchor" href="#canvasrenderingcontext2d-drawimage" aria-label="Permalink to &quot;CanvasRenderingContext2D.drawImage()&quot;">​</a></h3><p>Canvas API 允许将图像文件写入画布，做法是读取图片后，使用<code>drawImage()</code>方法将这张图片放上画布。</p><p><code>CanvasRenderingContext2D.drawImage()</code>有三种使用格式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">drawImage</span><span style="color:#E1E4E8;">(image, dx, dy);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">drawImage</span><span style="color:#E1E4E8;">(image, dx, dy, dWidth, dHeight);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">drawImage</span><span style="color:#E1E4E8;">(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span></span></code></pre></div><p>各个参数的含义如下。</p><ul><li>image：图像元素</li><li>sx：图像内部的横坐标，用于映射到画布的放置点上。</li><li>sy：图像内部的纵坐标，用于映射到画布的放置点上。</li><li>sWidth：图像在画布上的宽度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的宽度。</li><li>sHeight：图像在画布上的高度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的高度。</li><li>dx：画布内部的横坐标，用于放置图像的左上角</li><li>dy：画布内部的纵坐标，用于放置图像的右上角</li><li>dWidth：图像在画布内部的宽度，会产生缩放效果。</li><li>dHeight：图像在画布内部的高度，会产生缩放效果。</li></ul><p>下面是最简单的使用场景，将图像放在画布上，两者左上角对齐。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Image</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">img.src </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;image.png&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">img.</span><span style="color:#B392F0;">onload</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">drawImage</span><span style="color:#E1E4E8;">(img, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>上面代码将一个 PNG 图像放入画布。这时，图像将是原始大小，如果画布小于图像，就会只显示出图像左上角，正好等于画布大小的那一块。</p><p>如果要显示完整的图片，可以用图像的宽和高，设置成画布的宽和高。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> image </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Image</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">image.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> drawImageActualSize;</span></span>
<span class="line"><span style="color:#E1E4E8;">image.src </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;https://example.com/image.jpg&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> drawImageActualSize</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  canvas.width </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.naturalWidth;</span></span>
<span class="line"><span style="color:#E1E4E8;">  canvas.height </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.naturalHeight;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">drawImage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.naturalWidth, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.naturalHeight);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，<code>&lt;canvas&gt;</code>元素的大小设置成图像的本来大小，就能保证完整展示图像。由于图像的本来大小，只有图像加载成功以后才能拿到，因此调整画布的大小，必须放在<code>image.onload</code>这个监听函数里面。</p><h3 id="像素读写" tabindex="-1">像素读写 <a class="header-anchor" href="#像素读写" aria-label="Permalink to &quot;像素读写&quot;">​</a></h3><p>以下三个方法与像素读写相关。</p><ul><li><code>CanvasRenderingContext2D.getImageData()</code>：将画布读取成一个 ImageData 对象</li><li><code>CanvasRenderingContext2D.putImageData()</code>：将 ImageData 对象写入画布</li><li><code>CanvasRenderingContext2D.createImageData()</code>：生成 ImageData 对象</li></ul><p><strong>（1）getImageData()</strong></p><p><code>CanvasRenderingContext2D.getImageData()</code>方法用来读取<code>&lt;canvas&gt;</code>的内容，返回一个 ImageData 对象，包含了每个像素的信息。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">getImageData</span><span style="color:#E1E4E8;">(sx, sy, sw, sh)</span></span></code></pre></div><p><code>getImageData()</code>方法接受四个参数。<code>sx</code>和<code>sy</code>是读取区域的左上角坐标，<code>sw</code>和<code>sh</code>是读取区域的宽度和高度。如果想要读取整个<code>&lt;canvas&gt;</code>区域，可以写成下面这样。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> imageData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">getImageData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, canvas.width, canvas.height);</span></span></code></pre></div><p><code>getImageData()</code>方法返回的是一个<code>ImageData</code>对象。该对象有三个属性。</p><ul><li>ImageData.data：一个一维数组。该数组的值，依次是每个像素的红、绿、蓝、alpha 通道值（每个值的范围是 0～255），因此该数组的长度等于<code>图像的像素宽度 x 图像的像素高度 x 4</code>。这个数组不仅可读，而且可写，因此通过操作这个数组，就可以达到操作图像的目的。</li><li>ImageData.width：浮点数，表示 ImageData 的像素宽度。</li><li>ImageData.height：浮点数，表示 ImageData 的像素高度。</li></ul><p><strong>（2）putImageData()</strong></p><p><code>CanvasRenderingContext2D.putImageData()</code>方法将<code>ImageData</code>对象的像素绘制在<code>&lt;canvas&gt;</code>画布上。该方法有两种使用格式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">putImageData</span><span style="color:#E1E4E8;">(imagedata, dx, dy)</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">putImageData</span><span style="color:#E1E4E8;">(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight)</span></span></code></pre></div><p>该方法有如下参数。</p><ul><li>imagedata：包含像素信息的 ImageData 对象。</li><li>dx：<code>&lt;canvas&gt;</code>元素内部的横坐标，用于放置 ImageData 图像的左上角。</li><li>dy：<code>&lt;canvas&gt;</code>元素内部的纵坐标，用于放置 ImageData 图像的左上角。</li><li>dirtyX：ImageData 图像内部的横坐标，用于作为放置到<code>&lt;canvas&gt;</code>的矩形区域的左上角的横坐标，默认为0。</li><li>dirtyY：ImageData 图像内部的纵坐标，用于作为放置到<code>&lt;canvas&gt;</code>的矩形区域的左上角的纵坐标，默认为0。</li><li>dirtyWidth：放置到<code>&lt;canvas&gt;</code>的矩形区域的宽度，默认为 ImageData 图像的宽度。</li><li>dirtyHeight：放置到<code>&lt;canvas&gt;</code>的矩形区域的高度，默认为 ImageData 图像的高度。</li></ul><p>下面是将 ImageData 对象绘制到<code>&lt;canvas&gt;</code>的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">putImageData</span><span style="color:#E1E4E8;">(imageData, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><strong>（3）createImageData()</strong></p><p><code>CanvasRenderingContext2D.createImageData()</code>方法用于生成一个空的<code>ImageData</code>对象，所有像素都是透明的黑色（即每个值都是<code>0</code>）。该方法有两种使用格式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">createImageData</span><span style="color:#E1E4E8;">(width, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">createImageData</span><span style="color:#E1E4E8;">(imagedata)</span></span></code></pre></div><p><code>createImageData()</code>方法的参数如下。</p><ul><li>width：ImageData 对象的宽度，单位为像素。</li><li>height：ImageData 对象的高度，单位为像素。</li><li>imagedata：一个现有的 ImageData 对象，返回值将是这个对象的拷贝。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> imageData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">createImageData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，<code>imageData</code>是一个 100 x 100 的像素区域，其中每个像素都是透明的黑色。</p><h3 id="canvasrenderingcontext2d-save-canvasrenderingcontext2d-restore" tabindex="-1">CanvasRenderingContext2D.save()，CanvasRenderingContext2D.restore() <a class="header-anchor" href="#canvasrenderingcontext2d-save-canvasrenderingcontext2d-restore" aria-label="Permalink to &quot;CanvasRenderingContext2D.save()，CanvasRenderingContext2D.restore()&quot;">​</a></h3><p><code>CanvasRenderingContext2D.save()</code>方法用于将画布的当前样式保存到堆栈，相当于在内存之中产生一个样式快照。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面代码中，<code>save()</code>会为画布的默认样式产生一个快照。</p><p><code>CanvasRenderingContext2D.restore()</code>方法将画布的样式恢复到上一个保存的快照，如果没有已保存的快照，则不产生任何效果。</p><p>上下文环境，restore方法用于恢复到上一次保存的上下文环境。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;green&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码画一个矩形。矩形的填充色本来设为绿色，但是<code>restore()</code>方法撤销了这个设置，将样式恢复上一次保存的状态（即默认样式），所以实际的填充色是黑色（默认颜色）。</p><h3 id="canvasrenderingcontext2d-canvas" tabindex="-1">CanvasRenderingContext2D.canvas <a class="header-anchor" href="#canvasrenderingcontext2d-canvas" aria-label="Permalink to &quot;CanvasRenderingContext2D.canvas&quot;">​</a></h3><p><code>CanvasRenderingContext2D.canvas</code>属性指向当前<code>CanvasRenderingContext2D</code>对象所在的<code>&lt;canvas&gt;</code>元素。该属性只读。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.canvas </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="图像变换" tabindex="-1">图像变换 <a class="header-anchor" href="#图像变换" aria-label="Permalink to &quot;图像变换&quot;">​</a></h3><p>以下方法用于图像变换。</p><ul><li><code>CanvasRenderingContext2D.rotate()</code>：图像旋转</li><li><code>CanvasRenderingContext2D.scale()</code>：图像缩放</li><li><code>CanvasRenderingContext2D.translate()</code>：图像平移</li><li><code>CanvasRenderingContext2D.transform()</code>：通过一个变换矩阵完成图像变换</li><li><code>CanvasRenderingContext2D.setTransform()</code>：取消前面的图像变换</li></ul><p><strong>（1）rotate()</strong></p><p><code>CanvasRenderingContext2D.rotate()</code>方法用于图像旋转。它接受一个弧度值作为参数，表示顺时针旋转的度数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">rotate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;"> *</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#F97583;"> /</span><span style="color:#79B8FF;"> 180</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码会显示一个顺时针倾斜45度的矩形。注意，<code>rotate()</code>方法必须在<code>fillRect()</code>方法之前调用，否则是不起作用的。</p><p>旋转中心点始终是画布左上角的原点。如果要更改中心点，需要使用<code>translate()</code>方法移动画布。</p><p><strong>（2）scale()</strong></p><p><code>CanvasRenderingContext2D.scale()</code>方法用于缩放图像。它接受两个参数，分别是<code>x</code>轴方向的缩放因子和<code>y</code>轴方向的缩放因子。默认情况下，一个单位就是一个像素，缩放因子可以缩放单位，比如缩放因子<code>0.5</code>表示将大小缩小为原来的50%，缩放因子<code>10</code>表示放大十倍。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">scale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，原来的矩形是 10 x 10，缩放后展示出来是 100 x 30。</p><p>如果缩放因子为1，就表示图像没有任何缩放。如果为-1，则表示方向翻转。<code>ctx.scale(-1, 1)</code>为水平翻转，<code>ctx.scale(1, -1)</code>表示垂直翻转。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">scale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.font </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;16px serif&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码会显示一个水平倒转的、高度放大2倍的<code>Hello World!</code>。</p><p>注意，负向缩放本质是坐标翻转，所针对的坐标轴就是画布左上角原点的坐标轴。</p><p><strong>（3）translate()</strong></p><p><code>CanvasRenderingContext2D.translate()</code>方法用于平移图像。它接受两个参数，分别是 x 轴和 y 轴移动的距离（单位像素）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">translate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><strong>（4）transform()</strong></p><p><code>CanvasRenderingContext2D.transform()</code>方法接受一个变换矩阵的六个元素作为参数，完成缩放、旋转、移动和倾斜等变形。</p><p>它的使用格式如下。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(a, b, c, d, e, f);</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">a:水平缩放(默认值1，单位倍数)</span></span>
<span class="line"><span style="color:#6A737D;">b:水平倾斜(默认值0，单位弧度)</span></span>
<span class="line"><span style="color:#6A737D;">c:垂直倾斜(默认值0，单位弧度)</span></span>
<span class="line"><span style="color:#6A737D;">d:垂直缩放(默认值1，单位倍数)</span></span>
<span class="line"><span style="color:#6A737D;">e:水平位移(默认值0，单位像素)</span></span>
<span class="line"><span style="color:#6A737D;">f:垂直位移(默认值0，单位像素)</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，原始图形是 100 x 100 的矩形，结果缩放成 200 x 100 的矩形，并且左上角从<code>(0, 0)</code>移动到<code>(50, 50)</code>。</p><p>注意，多个<code>transform()</code>方法具有叠加效果。</p><p><strong>（5）setTransform()</strong></p><p><code>CanvasRenderingContext2D.setTransform()</code>方法取消前面的图形变换，将画布恢复到该方法指定的状态。该方法的参数与<code>transform()</code>方法完全一致。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">translate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">setTransform</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码中，第一个<code>fillRect()</code>方法绘制的矩形，左上角从<code>(0, 0)</code>平移到<code>(50, 50)</code>。<code>setTransform()</code>方法取消了这个变换（已绘制的图形不受影响），将画布恢复到默认状态（变换矩形<code>1, 0, 0, 1, 0, 0</code>），所以第二个矩形的左上角回到<code>(0, 0)</code>。</p><h2 id="canvas-元素的方法" tabindex="-1"><code>&lt;canvas&gt;</code> 元素的方法 <a class="header-anchor" href="#canvas-元素的方法" aria-label="Permalink to &quot;\`&lt;canvas&gt;\` 元素的方法&quot;">​</a></h2><p>除了<code>CanvasRenderingContext2D</code>对象提供的方法，<code>&lt;canvas&gt;</code>元素本身也有自己的方法。</p><h3 id="htmlcanvaselement-todataurl" tabindex="-1">HTMLCanvasElement.toDataURL() <a class="header-anchor" href="#htmlcanvaselement-todataurl" aria-label="Permalink to &quot;HTMLCanvasElement.toDataURL()&quot;">​</a></h3><p><code>&lt;canvas&gt;</code>元素的<code>toDataURL()</code>方法，可以将 Canvas 数据转为 Data URI 格式的图像。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">(type, quality)</span></span></code></pre></div><p><code>toDataURL()</code>方法接受两个参数。</p><ul><li>type：字符串，表示图像的格式。默认为<code>image/png</code>，另一个可用的值是<code>image/jpeg</code>，Chrome 浏览器还可以使用<code>image/webp</code>。</li><li>quality：浮点数，0到1之间，表示 JPEG 和 WebP 图像的质量系数，默认值为0.92。</li></ul><p>该方法的返回值是一个 Data URI 格式的字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> convertCanvasToImage</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">canvas</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> image </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Image</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  image.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image/png&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> image;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面的代码将<code>&lt;canvas&gt;</code>元素，转化成PNG Data URI。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fullQuality </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image/jpeg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mediumQuality </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image/jpeg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lowQuality </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image/jpeg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码将<code>&lt;canvas&gt;</code>元素转成高画质、中画质、低画质三种 JPEG 图像。</p><h3 id="htmlcanvaselement-toblob" tabindex="-1">HTMLCanvasElement.toBlob() <a class="header-anchor" href="#htmlcanvaselement-toblob" aria-label="Permalink to &quot;HTMLCanvasElement.toBlob()&quot;">​</a></h3><p><code>HTMLCanvasElement.toBlob()</code>方法用于将<code>&lt;canvas&gt;</code>图像转成一个 Blob 对象，默认类型是<code>image/png</code>。它的使用格式如下。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 格式</span></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">toBlob</span><span style="color:#E1E4E8;">(callback, mimeType, quality)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">toBlob</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">blob</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&#39;image/jpeg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.95</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p><code>toBlob()</code>方法可以接受三个参数。</p><ul><li>callback：回调函数。它接受生成的 Blob 对象作为参数。</li><li>mimeType：字符串，图像的 MIMEType 类型，默认是<code>image/png</code>。</li><li>quality：浮点数，0到1之间，表示图像的质量，只对<code>image/jpeg</code>和<code>image/webp</code>类型的图像有效。</li></ul><p>注意，该方法没有返回值。</p><p>下面的例子将<code>&lt;canvas&gt;</code>图像复制成<code>&lt;img&gt;</code>图像。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> blobToImg</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">blob</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> newImg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(blob);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  newImg.</span><span style="color:#B392F0;">onload</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">    // 使用完毕，释放 URL 对象</span></span>
<span class="line"><span style="color:#79B8FF;">    URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">revokeObjectURL</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  newImg.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(newImg);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">toBlob</span><span style="color:#E1E4E8;">(blobToImg);</span></span></code></pre></div><h2 id="canvas-使用实例" tabindex="-1">Canvas 使用实例 <a class="header-anchor" href="#canvas-使用实例" aria-label="Permalink to &quot;Canvas 使用实例&quot;">​</a></h2><h3 id="动画效果" tabindex="-1">动画效果 <a class="header-anchor" href="#动画效果" aria-label="Permalink to &quot;动画效果&quot;">​</a></h3><p>通过改变坐标，很容易在画布 Canvas 元素上产生动画效果。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> canvas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myCanvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> posX </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> posY </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;black&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">fillRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, canvas.width, canvas.height);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  posX </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  posY </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 0.25</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.fillStyle </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;white&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">arc</span><span style="color:#E1E4E8;">(posX, posY, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#F97583;"> *</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">closePath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码会产生一个小圆点，每隔30毫秒就向右下方移动的效果。<code>setInterval()</code>函数的一开始，之所以要将画布重新渲染黑色底色，是为了抹去上一步的小圆点。</p><p>在这个例子的基础上，通过设置圆心坐标，可以产生各种运动轨迹。下面是先上升后下降的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> -</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> gravity </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  posX </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> vx;</span></span>
<span class="line"><span style="color:#E1E4E8;">  posY </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> vy;</span></span>
<span class="line"><span style="color:#E1E4E8;">  vy </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> gravity;</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面代码中，<code>x</code>坐标始终增大，表示持续向右运动。<code>y</code>坐标先变小，然后在重力作用下，不断增大，表示先上升后下降。</p><h3 id="像素处理" tabindex="-1">像素处理 <a class="header-anchor" href="#像素处理" aria-label="Permalink to &quot;像素处理&quot;">​</a></h3><p>通过<code>getImageData()</code>方法和<code>putImageData()</code>方法，可以处理每个像素，进而操作图像内容，因此可以改写图像。</p><p>下面是图像处理的通用写法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (canvas.width </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;"> 0</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> canvas.height </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> imageData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getImageData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, canvas.width, canvas.height);</span></span>
<span class="line"><span style="color:#B392F0;">  filter</span><span style="color:#E1E4E8;">(imageData);</span></span>
<span class="line"><span style="color:#E1E4E8;">  context.</span><span style="color:#B392F0;">putImageData</span><span style="color:#E1E4E8;">(imageData, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，<code>filter</code>是一个处理像素的函数。以下是几种常见的<code>filter</code>。</p><p><strong>（1）灰度效果</strong></p><p>灰度图（grayscale）就是取红、绿、蓝三个像素值的算术平均值，这实际上将图像转成了黑白形式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">grayscale</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pixels</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pixels.data;</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> d.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i];</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> pixels;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>上面代码中，<code>d[i]</code>是红色值，<code>d[i+1]</code>是绿色值，<code>d[i+2]</code>是蓝色值，<code>d[i+3]</code>是 alpha 通道值。转成灰度的算法，就是将红、绿、蓝三个值相加后除以3，再将结果写回数组。</p><p><strong>（2）复古效果</strong></p><p>复古效果（sepia）是将红、绿、蓝三种值，分别取这三个值的某种加权平均值，使得图像有一种古旧的效果。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">sepia</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pixels</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pixels.data;</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> d.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i];</span></span>
<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      d[i]     </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.393</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (g </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.769</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.189</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// red</span></span>
<span class="line"><span style="color:#E1E4E8;">      d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.349</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (g </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.686</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.168</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// green</span></span>
<span class="line"><span style="color:#E1E4E8;">      d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.272</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (g </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.534</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.131</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// blue</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> pixels;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p><strong>（3）红色蒙版效果</strong></p><p>红色蒙版指的是，让图像呈现一种偏红的效果。算法是将红色通道设为红、绿、蓝三个值的平均值，而将绿色通道和蓝色通道都设为0。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> red</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pixels</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pixels.data;</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> d.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i];</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b)</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;        </span><span style="color:#6A737D;">// 红色通道取平均值</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 绿色通道和蓝色通道都设为0</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> pixels;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p><strong>（4）亮度效果</strong></p><p>亮度效果（brightness）是指让图像变得更亮或更暗。算法将红色通道、绿色通道、蓝色通道，同时加上一个正值或负值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> brightness</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pixels</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">delta</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pixels.data;</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> d.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> delta;     </span><span style="color:#6A737D;">// red</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> delta; </span><span style="color:#6A737D;">// green</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> delta; </span><span style="color:#6A737D;">// blue</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> pixels;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p><strong>（5）反转效果</strong></p><p>反转效果（invert）是指图片呈现一种色彩颠倒的效果。算法为红、绿、蓝通道都取各自的相反值（<code>255 - 原值</code>）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">invert</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pixels</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pixels.data;</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> d.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 255</span><span style="color:#F97583;"> -</span><span style="color:#E1E4E8;"> d[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 255</span><span style="color:#F97583;"> -</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 255</span><span style="color:#F97583;"> -</span><span style="color:#E1E4E8;"> d[i </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> pixels;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li>David Walsh, <a href="http://davidwalsh.name/convert-canvas-image" target="_blank" rel="noreferrer">JavaScript Canvas Image Conversion</a></li><li>Matt West, <a href="http://blog.teamtreehouse.com/getting-started-with-the-canvas-api" target="_blank" rel="noreferrer">Getting Started With The Canvas API</a></li><li>John Robinson, <a href="http://www.storminthecastle.com/2013/04/06/how-you-can-do-cool-image-effects-using-html5-canvas/" target="_blank" rel="noreferrer">How You Can Do Cool Image Effects Using HTML5 Canvas</a></li><li>Ivaylo Gerchev, <a href="http://www.sitepoint.com/html5-canvas-tutorial-introduction/" target="_blank" rel="noreferrer">HTML5 Canvas Tutorial: An Introduction</a></li><li>Donovan Hutchinson, <a href="http://hop.ie/blog/particles/" target="_blank" rel="noreferrer">Particles in canvas</a></li></ul>`,239)])])}const F=a(o,[["render",e]]);export{d as __pageData,F as default};
