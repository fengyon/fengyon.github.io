import{_ as a,c as n,b as e,o}from"./chunks/framework.E7rrtXIC.js";const d=JSON.parse('{"title":"WebSocket","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"WebSocket 握手","slug":"websocket-握手","link":"#websocket-握手","children":[]},{"level":2,"title":"客户端的简单示例","slug":"客户端的简单示例","link":"#客户端的简单示例","children":[]},{"level":2,"title":"客户端 API","slug":"客户端-api","link":"#客户端-api","children":[{"level":3,"title":"构造函数 WebSocket","slug":"构造函数-websocket","link":"#构造函数-websocket","children":[]},{"level":3,"title":"webSocket.readyState","slug":"websocket-readystate","link":"#websocket-readystate","children":[]},{"level":3,"title":"webSocket.onopen","slug":"websocket-onopen","link":"#websocket-onopen","children":[]},{"level":3,"title":"webSocket.onclose","slug":"websocket-onclose","link":"#websocket-onclose","children":[]},{"level":3,"title":"webSocket.onmessage","slug":"websocket-onmessage","link":"#websocket-onmessage","children":[]},{"level":3,"title":"webSocket.send()","slug":"websocket-send","link":"#websocket-send","children":[]},{"level":3,"title":"webSocket.bufferedAmount","slug":"websocket-bufferedamount","link":"#websocket-bufferedamount","children":[]},{"level":3,"title":"webSocket.onerror","slug":"websocket-onerror","link":"#websocket-onerror","children":[]}]},{"level":2,"title":"WebSocket 服务器","slug":"websocket-服务器","link":"#websocket-服务器","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"basic/webapi/websocket.md","filePath":"basic/webapi/websocket.md"}'),l={name:"basic/webapi/websocket.md"};function p(t,s,c,r,E,i){return o(),n("div",null,[...s[0]||(s[0]=[e(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/websocket.md for this page in Markdown format</div><h1 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h1><p>WebSocket 是一种网络通信协议，很多高级功能都需要它。</p><p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p><p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。HTTP 协议的这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用“轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p><p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。WebSocket 允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP 协议有点像发电子邮件，发出后必须等待对方回信；WebSocket 则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p><p>其他特点包括：</p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><p>（3）数据格式比较轻量，性能开销小，通信高效。</p><p>（4）可以发送文本，也可以发送二进制数据。</p><p>（5）没有同源限制，客户端可以与任意服务器通信，完全可以取代 Ajax。</p><p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>，对应 HTTPS 协议），服务器网址就是 URL。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws://example.com:80/some/path</span></span></code></pre></div><h2 id="websocket-握手" tabindex="-1">WebSocket 握手 <a class="header-anchor" href="#websocket-握手" aria-label="Permalink to &quot;WebSocket 握手&quot;">​</a></h2><p>浏览器发出的 WebSocket 握手请求类似于下面的样子：</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">GET</span><span style="color:#E1E4E8;"> / </span><span style="color:#F97583;">HTTP</span><span style="color:#E1E4E8;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#85E89D;">Connection</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> Upgrade</span></span>
<span class="line"><span style="color:#85E89D;">Upgrade</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> websocket</span></span>
<span class="line"><span style="color:#85E89D;">Host</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> example.com</span></span>
<span class="line"><span style="color:#85E89D;">Origin</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> null</span></span>
<span class="line"><span style="color:#85E89D;">Sec-WebSocket-Key</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> sN9cRrP/n9NdMgdcy2VJFQ==</span></span>
<span class="line"><span style="color:#85E89D;">Sec-WebSocket-Version</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> 13</span></span></code></pre></div><p>上面的头信息之中，有一个 HTTP 头是<code>Upgrade</code>。HTTP1.1 协议规定，<code>Upgrade</code>字段表示将通信协议从<code>HTTP/1.1</code>转向该字段指定的协议。<code>Connection</code>字段表示浏览器通知服务器，如果可以的话，就升级到 WebSocket 协议。<code>Origin</code>字段用于提供请求发出的域名，供服务器验证是否许可的范围内（服务器也可以不验证）。<code>Sec-WebSocket-Key</code>则是用于握手协议的密钥，是 Base64 编码的16字节随机字符串。</p><p>服务器的 WebSocket 回应如下。</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">HTTP</span><span style="color:#E1E4E8;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#79B8FF;"> 101</span><span style="color:#9ECBFF;"> Switching Protocols</span></span>
<span class="line"><span style="color:#85E89D;">Connection</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> Upgrade</span></span>
<span class="line"><span style="color:#85E89D;">Upgrade</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> websocket</span></span>
<span class="line"><span style="color:#85E89D;">Sec-WebSocket-Accept</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> fFBooB7FAkLlXgRSz0BT3v4hq5s=</span></span>
<span class="line"><span style="color:#85E89D;">Sec-WebSocket-Origin</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> null</span></span>
<span class="line"><span style="color:#85E89D;">Sec-WebSocket-Location</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> ws://example.com/</span></span></code></pre></div><p>上面代码中，服务器同样用<code>Connection</code>字段通知浏览器，需要改变协议。<code>Sec-WebSocket-Accept</code>字段是服务器在浏览器提供的<code>Sec-WebSocket-Key</code>字符串后面，添加 <a href="http://tools.ietf.org/html/rfc6455" target="_blank" rel="noreferrer">RFC6456</a> 标准规定的“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”字符串，然后再取 SHA-1 的哈希值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了 WebSocket 请求。<code>Sec-WebSocket-Location</code>字段表示进行通信的 WebSocket 网址。</p><p>完成握手以后，WebSocket 协议就在 TCP 协议之上，开始传送数据。</p><h2 id="客户端的简单示例" tabindex="-1">客户端的简单示例 <a class="header-anchor" href="#客户端的简单示例" aria-label="Permalink to &quot;客户端的简单示例&quot;">​</a></h2><p>WebSocket 的用法相当简单。</p><p>下面是一个网页脚本的例子，基本上一眼就能明白。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ws </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;wss://echo.websocket.org&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onopen</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">evt</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Connection open ...&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello WebSockets!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">evt</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Received Message: &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> evt.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onclose</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">evt</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Connection closed.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="客户端-api" tabindex="-1">客户端 API <a class="header-anchor" href="#客户端-api" aria-label="Permalink to &quot;客户端 API&quot;">​</a></h2><p>浏览器对 WebSocket 协议的处理，无非就是三件事。</p><ul><li>建立连接和断开连接</li><li>发送数据和接收数据</li><li>处理错误</li></ul><h3 id="构造函数-websocket" tabindex="-1">构造函数 WebSocket <a class="header-anchor" href="#构造函数-websocket" aria-label="Permalink to &quot;构造函数 WebSocket&quot;">​</a></h3><p><code>WebSocket</code>对象作为一个构造函数，用于新建<code>WebSocket</code>实例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ws </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ws://localhost:8080&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>执行上面语句之后，客户端就会与服务器进行连接。</p><h3 id="websocket-readystate" tabindex="-1">webSocket.readyState <a class="header-anchor" href="#websocket-readystate" aria-label="Permalink to &quot;webSocket.readyState&quot;">​</a></h3><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p><ul><li>CONNECTING：值为0，表示正在连接。</li><li>OPEN：值为1，表示连接成功，可以通信了。</li><li>CLOSING：值为2，表示连接正在关闭。</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li></ul><p>下面是一个示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (ws.readyState) {</span></span>
<span class="line"><span style="color:#F97583;">  case</span><span style="color:#E1E4E8;"> WebSocket.</span><span style="color:#79B8FF;">CONNECTING</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">    // do something</span></span>
<span class="line"><span style="color:#F97583;">    break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  case</span><span style="color:#E1E4E8;"> WebSocket.</span><span style="color:#79B8FF;">OPEN</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">    // do something</span></span>
<span class="line"><span style="color:#F97583;">    break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  case</span><span style="color:#E1E4E8;"> WebSocket.</span><span style="color:#79B8FF;">CLOSING</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">    // do something</span></span>
<span class="line"><span style="color:#F97583;">    break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  case</span><span style="color:#E1E4E8;"> WebSocket.</span><span style="color:#79B8FF;">CLOSED</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">    // do something</span></span>
<span class="line"><span style="color:#F97583;">    break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">    // this never happens</span></span>
<span class="line"><span style="color:#F97583;">    break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="websocket-onopen" tabindex="-1">webSocket.onopen <a class="header-anchor" href="#websocket-onopen" aria-label="Permalink to &quot;webSocket.onopen&quot;">​</a></h3><p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onopen</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello Server!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>如果要指定多个回调函数，可以使用<code>addEventListener</code>方法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello Server!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="websocket-onclose" tabindex="-1">webSocket.onclose <a class="header-anchor" href="#websocket-onclose" aria-label="Permalink to &quot;webSocket.onclose&quot;">​</a></h3><p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onclose</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.code;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> reason </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.reason;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> wasClean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.wasClean;</span></span>
<span class="line"><span style="color:#6A737D;">  // handle close event</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.code;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> reason </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.reason;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> wasClean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.wasClean;</span></span>
<span class="line"><span style="color:#6A737D;">  // handle close event</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="websocket-onmessage" tabindex="-1">webSocket.onmessage <a class="header-anchor" href="#websocket-onmessage" aria-label="Permalink to &quot;webSocket.onmessage&quot;">​</a></h3><p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.data;</span></span>
<span class="line"><span style="color:#6A737D;">  // 处理数据</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.data;</span></span>
<span class="line"><span style="color:#6A737D;">  // 处理数据</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code>对象或<code>Arraybuffer</code>对象）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;">(typeOf event.data </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> String) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received data string&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;">(event.data </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> ArrayBuffer</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received arraybuffer&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显式指定收到的二进制数据类型。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 收到的是 blob 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.binaryType </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;blob&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e.data.size);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 收到的是 ArrayBuffer 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.binaryType </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;arraybuffer&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">onmessage</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e.data.byteLength);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="websocket-send" tabindex="-1">webSocket.send() <a class="header-anchor" href="#websocket-send" aria-label="Permalink to &quot;webSocket.send()&quot;">​</a></h3><p>实例对象的<code>send()</code>方法用于向服务器发送数据。</p><p>发送文本的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;your message&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>发送 Blob 对象的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input[type=&quot;file&quot;]&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .files[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(file);</span></span></code></pre></div><p>发送 ArrayBuffer 对象的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Sending canvas ImageData as ArrayBuffer</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas_context.</span><span style="color:#B392F0;">getImageData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">320</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> binary </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Uint8Array</span><span style="color:#E1E4E8;">(img.data.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> img.data.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  binary[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> img.data[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(binary.buffer);</span></span></code></pre></div><h3 id="websocket-bufferedamount" tabindex="-1">webSocket.bufferedAmount <a class="header-anchor" href="#websocket-bufferedamount" aria-label="Permalink to &quot;webSocket.bufferedAmount&quot;">​</a></h3><p>实例对象的<code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (socket.bufferedAmount </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 发送完毕</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 发送还没结束</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="websocket-onerror" tabindex="-1">webSocket.onerror <a class="header-anchor" href="#websocket-onerror" aria-label="Permalink to &quot;webSocket.onerror&quot;">​</a></h3><p>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">onerror</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // handle error event</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // handle error event</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h2 id="websocket-服务器" tabindex="-1">WebSocket 服务器 <a class="header-anchor" href="#websocket-服务器" aria-label="Permalink to &quot;WebSocket 服务器&quot;">​</a></h2><p>WebSocket 协议需要服务器支持。各种服务器的实现，可以查看维基百科的<a href="https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations" target="_blank" rel="noreferrer">列表</a>。</p><p>常用的 Node 实现有以下三种。</p><ul><li><a href="https://github.com/uWebSockets/uWebSockets" target="_blank" rel="noreferrer">µWebSockets</a></li><li><a href="http://socket.io/" target="_blank" rel="noreferrer">Socket.IO</a></li><li><a href="https://github.com/theturtle32/WebSocket-Node" target="_blank" rel="noreferrer">WebSocket-Node</a></li></ul><p>具体的用法请查看它们的文档，本教程不详细介绍了。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li>Ryan Stewart, <a href="http://www.adobe.com/devnet/html5/articles/real-time-data-exchange-in-html5-with-websockets.html" target="_blank" rel="noreferrer">Real-time data exchange in HTML5 with WebSockets</a></li><li>Malte Ubl &amp; Eiji Kitamura，<a href="https://www.html5rocks.com/en/tutorials/websockets/basics/" target="_blank" rel="noreferrer">Introducing WebSockets: Bringing Sockets to the Web</a></li><li>Jack Lawson, <a href="http://buildnewgames.com/websockets/" target="_blank" rel="noreferrer">WebSockets: A Guide</a></li><li>Michael W., <a href="http://codular.com/node-web-sockets" target="_blank" rel="noreferrer">Starting with Node and Web Sockets</a></li><li>Jesse Cravens, <a href="http://tech.pro/tutorial/1167/introduction-to-websockets" target="_blank" rel="noreferrer">Introduction to WebSockets</a></li><li>Matt West, <a href="http://blog.teamtreehouse.com/an-introduction-to-websockets" target="_blank" rel="noreferrer">An Introduction to WebSockets</a></li><li>Maciej Sopyło, <a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-better-performance-with-socket-io-and-dot/" target="_blank" rel="noreferrer">Node.js: Better Performance With Socket.IO and doT</a></li><li>Jos Dirksen, <a href="http://www.smartjava.org/content/capture-canvas-and-webgl-output-video-using-websockets" target="_blank" rel="noreferrer">Capture Canvas and WebGL output as video using websockets</a></li><li>Fionn Kellehe, <a href="https://nodesource.com/blog/understanding-socketio" target="_blank" rel="noreferrer">Understanding Socket.IO</a></li><li><a href="http://cjihrig.com/blog/how-to-use-websockets/" target="_blank" rel="noreferrer">How to Use WebSockets</a></li><li><a href="https://www.tutorialspoint.com/websockets/websockets_send_receive_messages.htm" target="_blank" rel="noreferrer">WebSockets - Send &amp; Receive Messages</a></li></ul>`,77)])])}const b=a(l,[["render",p]]);export{d as __pageData,b as default};
