import{_ as e,c as a,o as l,b as s}from"./chunks/framework.3z4p0y-m.js";const m=JSON.parse('{"title":"iframe","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":2,"title":"sandbox 属性","slug":"sandbox-属性","link":"#sandbox-属性","children":[]},{"level":2,"title":"loading 属性","slug":"loading-属性","link":"#loading-属性","children":[]}],"relativePath":"basic/html/iframe.md","filePath":"basic/html/iframe.md"}'),c={name:"basic/html/iframe.md"};function t(n,o,d,i,p,r){return l(),a("div",null,[...o[0]||(o[0]=[s(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/html/iframe.md for this page in Markdown format</div><h1 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h1><p><code>&lt;iframe&gt;</code>标签用于在网页里面嵌入其他网页。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p><code>&lt;iframe&gt;</code>标签生成一个指定区域，在该区域中嵌入其他网页。它是一个容器元素，如果浏览器不支持<code>&lt;iframe&gt;</code>，就会显示内部的子元素。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">iframe</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://www.example.com&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        width</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;100%&quot;</span><span style="color:#B392F0;"> height</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;500&quot;</span><span style="color:#B392F0;"> frameborder</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        allowfullscreen</span><span style="color:#B392F0;"> sandbox</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">a</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://www.example.com&quot;</span><span style="color:#E1E4E8;">&gt;点击打开嵌入页面&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">iframe</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面的代码在当前网页嵌入<code>https://www.example.com</code>，显示区域的宽度是<code>100%</code>，高度是<code>500</code>像素。如果当前浏览器不支持<code>&lt;iframe&gt;</code>，则会显示一个链接，让用户点击。</p><p>浏览器普遍支持<code>&lt;iframe&gt;</code>，所以内部的子元素可以不写。</p><p><code>&lt;iframe&gt;</code>的属性如下。</p><ul><li><code>allowfullscreen</code>：允许嵌入的网页全屏显示，需要全屏 API 的支持，请参考相关的 JavaScript 教程。</li><li><code>frameborder</code>：是否绘制边框，<code>0</code>为不绘制，<code>1</code>为绘制（默认值）。建议尽量少用这个属性，而是在 CSS 里面设置样式。</li><li><code>src</code>：嵌入的网页的 URL。</li><li><code>width</code>：显示区域的宽度。</li><li><code>height</code>：显示区域的高度。</li><li><code>sandbox</code>：设置嵌入的网页的权限，详见下文。</li><li><code>importance</code>：浏览器下载嵌入的网页的优先级，可以设置三个值。<code>high</code>表示高优先级，<code>low</code>表示低优先级，<code>auto</code>表示由浏览器自行决定。</li><li><code>name</code>：内嵌窗口的名称，可以用于<code>&lt;a&gt;</code>、<code>&lt;form&gt;</code>、<code>&lt;base&gt;</code>的<code>target</code>属性。</li><li><code>referrerpolicy</code>：请求嵌入网页时，HTTP 请求的<code>Referer</code>字段的设置。参见<code>&lt;a&gt;</code>标签的介绍。</li></ul><h2 id="sandbox-属性" tabindex="-1">sandbox 属性 <a class="header-anchor" href="#sandbox-属性" aria-label="Permalink to &quot;sandbox 属性&quot;">​</a></h2><p>嵌入的网页默认具有正常权限，比如执行脚本、提交表单、弹出窗口等。如果嵌入的网页是其他网站的页面，你不了解对方会执行什么操作，因此就存在安全风险。为了限制<code>&lt;iframe&gt;</code>的风险，HTML 提供了<code>sandbox</code>属性，允许设置嵌入的网页的权限，等同于提供了一个隔离层，即“沙箱”。</p><p><code>sandbox</code>可以当作布尔属性使用，表示打开所有限制。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">iframe</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://www.example.com&quot;</span><span style="color:#B392F0;"> sandbox</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">iframe</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>sandbox</code>属性可以设置具体的值，表示逐项打开限制。未设置某一项，就表示不具有该权限。</p><ul><li><code>allow-forms</code>：允许提交表单。</li><li><code>allow-modals</code>：允许提示框，即允许执行<code>window.alert()</code>等会产生弹出提示框的 JavaScript 方法。</li><li><code>allow-popups</code>：允许嵌入的网页使用<code>window.open()</code>方法弹出窗口。</li><li><code>allow-popups-to-escape-sandbox</code>：允许弹出窗口不受沙箱的限制。</li><li><code>allow-orientation-lock</code>：允许嵌入的网页用脚本锁定屏幕的方向，即横屏或竖屏。</li><li><code>allow-pointer-lock</code>：允许嵌入的网页使用 Pointer Lock API，锁定鼠标的移动。</li><li><code>allow-presentation</code>：允许嵌入的网页使用 Presentation API。</li><li><code>allow-same-origin</code>：不打开该项限制，将使得所有加载的网页都视为跨域。</li><li><code>allow-scripts</code>：允许嵌入的网页运行脚本（但不创建弹出窗口）。</li><li><code>allow-storage-access-by-user-activation</code>：<code>sandbox</code>属性同时设置了这个值和<code>allow-same-origin</code>的情况下，允许<code>&lt;iframe&gt;</code>嵌入的第三方网页通过用户发起<code>document.requestStorageAccess()</code>请求，经由 Storage Access API 访问父窗口的 Cookie。</li><li><code>allow-top-navigation</code>：允许嵌入的网页对顶级窗口进行导航。</li><li><code>allow-top-navigation-by-user-activation</code>：允许嵌入的网页对顶级窗口进行导航，但必须由用户激活。</li><li><code>allow-downloads-without-user-activation</code>：允许在没有用户激活的情况下，嵌入的网页启动下载。</li></ul><p>注意，不要同时设置<code>allow-scripts</code>和<code>allow-same-origin</code>属性，这将使得嵌入的网页可以改变或删除<code>sandbox</code>属性。</p><h2 id="loading-属性" tabindex="-1">loading 属性 <a class="header-anchor" href="#loading-属性" aria-label="Permalink to &quot;loading 属性&quot;">​</a></h2><p><code>&lt;iframe&gt;</code>指定的网页会立即加载，有时这不是希望的行为。<code>&lt;iframe&gt;</code>滚动进入视口以后再加载，这样会比较节省带宽。</p><p><code>loading</code>属性可以触发<code>&lt;iframe&gt;</code>网页的懒加载。该属性可以取以下三个值。</p><ul><li><code>auto</code>：浏览器的默认行为，与不使用<code>loading</code>属性效果相同。</li><li><code>lazy</code>：<code>&lt;iframe&gt;</code>的懒加载，即将滚动进入视口时开始加载。</li><li><code>eager</code>：立即加载资源，无论在页面上的位置如何。</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">iframe</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#B392F0;"> loading</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;lazy&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">iframe</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码会启用<code>&lt;iframe&gt;</code>的懒加载。</p><p>有一点需要注意，如果<code>&lt;iframe&gt;</code>是隐藏的，则<code>loading</code>属性无效，将会立即加载。只要满足以下任一个条件，Chrome 浏览器就会认为<code>&lt;iframe&gt;</code>是隐藏的。</p><blockquote><ul><li><code>&lt;iframe&gt;</code>的宽度和高度为4像素或更小。</li><li>样式设为<code>display: none</code>或<code>visibility: hidden</code>。</li><li>使用定位坐标为负<code>X</code>或负<code>Y</code>，将<code>&lt;iframe</code>&gt;放置在屏幕外。</li></ul></blockquote>`,25)])])}const g=e(c,[["render",t]]);export{m as __pageData,g as default};
