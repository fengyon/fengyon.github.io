import{_ as a,c as n,b as e,o}from"./chunks/framework.E7rrtXIC.js";const i=JSON.parse('{"title":"Headers 对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"append()","slug":"append","link":"#append","children":[]},{"level":3,"title":"delete()","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"entries()","slug":"entries","link":"#entries","children":[]},{"level":3,"title":"forEach()","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"get()","slug":"get","link":"#get","children":[]},{"level":3,"title":"getSetCookie()","slug":"getsetcookie","link":"#getsetcookie","children":[]},{"level":3,"title":"has()","slug":"has","link":"#has","children":[]},{"level":3,"title":"keys()","slug":"keys","link":"#keys","children":[]},{"level":3,"title":"set()","slug":"set","link":"#set","children":[]},{"level":3,"title":"values()","slug":"values","link":"#values","children":[]}]}],"relativePath":"basic/webapi/headers.md","filePath":"basic/webapi/headers.md"}'),p={name:"basic/webapi/headers.md"};function l(t,s,c,r,E,y){return o(),n("div",null,[...s[0]||(s[0]=[e(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/headers.md for this page in Markdown format</div><h1 id="headers-对象" tabindex="-1">Headers 对象 <a class="header-anchor" href="#headers-对象" aria-label="Permalink to &quot;Headers 对象&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Headers 代表 HTTP 消息的数据头。</p><p>它通过<code>Headers()</code>构造方法，生成实例对象。<code>Request.headers</code>属性和<code>Response.headers</code>属性，指向的都是 Headers 实例对象。</p><p>Headers 实例对象内部，以键值对的形式保存 HTTP 消息头，可以用<code>for...of</code>循环进行遍历，比如<code>for (const p of myHeaders)</code>。新建的 Headers 实例对象，内部是空的，需要用<code>append()</code>方法添加键值对。</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><p><code>Headers()</code>构造函数用来新建 Headers 实例对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>它可以接受一个表示 HTTP 数据头的对象，或者另一个 Headers 实例对象，作为参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> httpHeaders</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;X-My-Custom-Header&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Zeke are cool&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">(httpHeaders);</span></span></code></pre></div><p>最后，它还可以接受一个键值对数组，作为参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> headers</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;Set-Cookie&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;greeting=hello&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;Set-Cookie&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;name=world&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">(headers);</span></span></code></pre></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="append" tabindex="-1">append() <a class="header-anchor" href="#append" aria-label="Permalink to &quot;append()&quot;">​</a></h3><p><code>append()</code>方法用来添加字段。如果字段已经存在，它会将新的值添加到原有值的末端。</p><p>它接受两个参数，第一个是字段名，第二个是字段值。它没有返回值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(name, value)</span></span></code></pre></div><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>下面是同名字段已经存在的情况。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;deflate&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;gzip&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;deflate, gzip&#39;</span></span></code></pre></div><p>上面示例中，<code>Accept-Encoding</code>字段已经存在，所以<code>append()</code>会将新的值添加到原有值的末尾。</p><h3 id="delete" tabindex="-1">delete() <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete()&quot;">​</a></h3><p><code>delete()</code>用来删除一个键值对，参数<code>name</code>指定删除的字段名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">(name)</span></span></code></pre></div><p>如果参数<code>name</code>不是合法的字段名，或者是不可删除的字段，上面的命令会抛错。</p><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="entries" tabindex="-1">entries() <a class="header-anchor" href="#entries" aria-label="Permalink to &quot;entries()&quot;">​</a></h3><p><code>entries()</code>方法用来遍历所有键值对，返回一个 iterator 指针，供<code>for...of</code>循环使用。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;text/xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Vary&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Accept-Language&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pair</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> myHeaders.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">pair</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}: \${</span><span style="color:#E1E4E8;">pair</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="foreach" tabindex="-1">forEach() <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach()&quot;">​</a></h3><p><code>forEach()</code>方法用来遍历所有键值对，对每个指定键值对执行一个指定函数。</p><p>它的第一个参数是回调函数<code>callbackFn</code>，第二个参数<code>thisArg</code>是<code>callbackFn</code>所用的 this 对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(callbackFn)</span></span>
<span class="line"><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(callbackFn, thisArg)</span></span></code></pre></div><p>回调函数<code>callback</code>会接受到以下参数。</p><ul><li>value：当前的字段值。</li><li>key：当前的字段名。</li><li>object：当前正在执行的 Headers 对象。</li></ul><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cookie&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;This is a demo cookie&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;compression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;gzip&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">} ==&gt; \${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="get" tabindex="-1">get() <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get()&quot;">​</a></h3><p><code>get()</code>方法用于取出指定字段的字段值，它的参数就是字段名。如果字段名不合法（比如包含中文字符），它会抛错；如果字段在当前 Headers 对象不存在，它返回<code>null</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name)</span></span></code></pre></div><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;image/jpeg&quot;</span></span></code></pre></div><p>如果当前字段有多个值，<code>get()</code>会返回所有值。</p><h3 id="getsetcookie" tabindex="-1">getSetCookie() <a class="header-anchor" href="#getsetcookie" aria-label="Permalink to &quot;getSetCookie()&quot;">​</a></h3><p><code>getSetCookie()</code>返回一个数组，包含所有<code>Set-Cookie</code>设定的 Cookie 值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> headers</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;Set-Cookie&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;name1=value1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">headers.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Set-Cookie&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;name2=value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">headers.</span><span style="color:#B392F0;">getSetCookie</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;name1=value1&quot;, &quot;name2=value2&quot;]</span></span></code></pre></div><h3 id="has" tabindex="-1">has() <a class="header-anchor" href="#has" aria-label="Permalink to &quot;has()&quot;">​</a></h3><p><code>has()</code>返回一个布尔值，表示 Headers 对象是否包含指定字段。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(name)</span></span></code></pre></div><p>如果参数<code>name</code>不是有效的 HTTP 数据头的字段名，该方法会报错。</p><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="keys" tabindex="-1">keys() <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;keys()&quot;">​</a></h3><p><code>keys()</code>方法用来遍历 Headers 数据头的所有字段名。它返回的是一个 iterator 对象，供<code>for...of</code>使用。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;text/xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Vary&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Accept-Language&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> myHeaders.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="set" tabindex="-1">set() <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set()&quot;">​</a></h3><p><code>set()</code>方法用来为指定字段添加字段值。如果字段不存在，就添加该字段；如果字段已存在，就用新的值替换老的值，这是它与<code>append()</code>方法的主要区别。</p><p>它的第一个参数<code>name</code>是字段名，第二个参数<code>value</code>是字段值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(name, value)</span></span></code></pre></div><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;deflate&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;gzip&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;gzip&#39;</span></span></code></pre></div><p>上面示例中，连续两次使用<code>set()</code>对<code>Accept-Encoding</code>赋值，第二个值会覆盖第一个值。</p><h3 id="values" tabindex="-1">values() <a class="header-anchor" href="#values" aria-label="Permalink to &quot;values()&quot;">​</a></h3><p><code>values()</code>方法用来遍历 Headers 对象的字段值。它返回一个 iterator 对象，供<code>for...of</code>使用。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myHeaders</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Headers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;text/xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myHeaders.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Vary&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Accept-Language&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> value</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> myHeaders.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,68)])])}const u=a(p,[["render",l]]);export{i as __pageData,u as default};
