import{_ as a,c as n,o,b as l}from"./chunks/framework.3z4p0y-m.js";const d=JSON.parse('{"title":"Response API","description":"","frontmatter":{},"headers":[{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[{"level":3,"title":"body，bodyUsed","slug":"body-bodyused","link":"#body-bodyused","children":[]},{"level":3,"title":"headers","slug":"headers","link":"#headers","children":[]},{"level":3,"title":"ok","slug":"ok","link":"#ok","children":[]},{"level":3,"title":"redirected","slug":"redirected","link":"#redirected","children":[]},{"level":3,"title":"status，statusText","slug":"status-statustext","link":"#status-statustext","children":[]},{"level":3,"title":"type","slug":"type","link":"#type","children":[]},{"level":3,"title":"url","slug":"url","link":"#url","children":[]}]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"数据读取","slug":"数据读取","link":"#数据读取","children":[]},{"level":3,"title":"clone()","slug":"clone","link":"#clone","children":[]}]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[{"level":3,"title":"Response.json()","slug":"response-json","link":"#response-json","children":[]},{"level":3,"title":"Response.error()","slug":"response-error","link":"#response-error","children":[]},{"level":3,"title":"Response.redirect()","slug":"response-redirect","link":"#response-redirect","children":[]}]}],"relativePath":"basic/webapi/response.md","filePath":"basic/webapi/response.md"}'),p={name:"basic/webapi/response.md"};function e(t,s,c,r,E,i){return o(),n("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/response.md for this page in Markdown format</div><h1 id="response-api" tabindex="-1">Response API <a class="header-anchor" href="#response-api" aria-label="Permalink to &quot;Response API&quot;">​</a></h1><p>浏览器原生提供<code>Response()</code>构造函数，用来构造服务器响应。</p><p><code>fetch()</code>方法返回的就是一个 Response 对象。</p><h2 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h2><p><code>Response()</code>作为构造方法调用时，返回 Response 实例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">([body:Object, [init : Object]]): Response</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 用法</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(body)</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(body, options)</span></span></code></pre></div><p>它带有两个参数，都是可选的。</p><p>第一个参数<code>body</code>代表服务器返回的数据体，必须是下面类型之一：ArrayBuffer、ArrayBufferView、Blob、FormData、ReadableStream、String、URLSearchParams。</p><p>第二个参数<code>init</code>是一个对象，代表服务器返回的数据头，类型描述如下。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#B392F0;">  status</span><span style="color:#E1E4E8;">: Number</span></span>
<span class="line"><span style="color:#B392F0;">  statusText</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  headers</span><span style="color:#E1E4E8;">: Object</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myBlob</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Blob</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { status: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, statusText: </span><span style="color:#9ECBFF;">&quot;OK&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myResponse</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(myBlob, myOptions);</span></span></code></pre></div><p>注意，如果返回 JSON 数据，必须将其转成字符串返回。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hello: </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> json</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(json, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json;charset=UTF-8&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面示例中，构造一个返回 JSON 数据的 Response 对象，就必须用<code>JSON.stringify()</code>方法，将第一个参数转为字符串。</p><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h3 id="body-bodyused" tabindex="-1">body，bodyUsed <a class="header-anchor" href="#body-bodyused" aria-label="Permalink to &quot;body，bodyUsed&quot;">​</a></h3><p><code>body</code>属性代表数据体，是一个只读的 ReadableStream 对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/fireworks.ogv&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> reader</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> res.body.</span><span style="color:#B392F0;">getReader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> reader.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">()).done) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;chunk size:&#39;</span><span style="color:#E1E4E8;">, result.value.byteLength);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面示例中，先建立一个 body 的读取器，然后每次读取一段数据，输出这段数据的字段长度。</p><p>注意，<code>body</code>是一个 Stream 对象，只能读取一次。取出所有数据以后，第二次就读不到了。</p><p><code>bodyUsed</code>属性是一个只读的布尔值，表示<code>body</code>属性是否已经读取。</p><h3 id="headers" tabindex="-1">headers <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;headers&quot;">​</a></h3><p><code>headers</code>属性代表服务器返回的数据头，是一个只读的 Headers 对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/flowers.jpg&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">res.headers);</span></span></code></pre></div><p>上面示例中，发出请求后，展开打印<code>res.headers</code>属性，即服务器回应的所有消息头。</p><h3 id="ok" tabindex="-1">ok <a class="header-anchor" href="#ok" aria-label="Permalink to &quot;ok&quot;">​</a></h3><p><code>ok</code>属性是一个布尔值，表示服务器返回的状态码是否成功（200到299），该属性只读。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/status/200&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res1.ok); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res2</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/status/404&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res2.ok); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="redirected" tabindex="-1">redirected <a class="header-anchor" href="#redirected" aria-label="Permalink to &quot;redirected&quot;">​</a></h3><p><code>redirected</code>是一个布尔值，表示服务器返回的状态码是否跳转类型（301，302等），该属性只读。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/status/200&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res1.redirected); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res2</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/status/301&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res2.redirected); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="status-statustext" tabindex="-1">status，statusText <a class="header-anchor" href="#status-statustext" aria-label="Permalink to &quot;status，statusText&quot;">​</a></h3><p><code>status</code>属性是一个数值，代表服务器返回的状态码，该属性只读。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/status/200&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res1.status); </span><span style="color:#6A737D;">// 200</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res2</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/status/404&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res2.status); </span><span style="color:#6A737D;">// 404</span></span></code></pre></div><p><code>statusText</code>属性是一个字符串，代表服务器返回的状态码的文字描述。比如，状态码200的<code>statusText</code>一般是<code>OK</code>，也可能为空。</p><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p><code>type</code>属性是一个只读字符串，表示服务器回应的类型，它的值有下面几种：basic、cors、default、error、opaque、opaqueredirect。</p><h3 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h3><p><code>url</code>属性是一个字符串，代表服务器路径，该属性只读。如果请求是重定向的，该属性就是重定向后的 URL。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="数据读取" tabindex="-1">数据读取 <a class="header-anchor" href="#数据读取" aria-label="Permalink to &quot;数据读取&quot;">​</a></h3><p>以下方法可以获取服务器响应的消息体，根据返回数据的不同类型，调用相应方法。</p><ul><li>.json()：返回一个 Promise 对象，最终得到一个解析后的 JSON 对象。</li><li>.text()：返回一个 Promise 对象，最终得到一个字符串。</li><li>.blob()：返回一个 Promise 对象，最终得到一个二进制 Blob 对象，代表某个文件整体的原始数据。</li><li>.arrayBuffer()：返回一个 Promise 对象，最终得到一个 ArrayBuffer 对象，代表一段固定长度的二进制数据。</li><li>.formData()：返回一个 Promise 对象，最终得到一个 FormData 对象，里面是键值对形式的表单提交数据。</li></ul><p>下面是从服务器获取 JSON 数据的一个例子，使用<code>.json()</code>方法，其他几个方法的用法都大同小异。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> getRedditPosts</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://www.reddit.com/r/all/top.json?limit=10&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> posts</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> data.data.children.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">child</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> child.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(posts.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">post</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> post.title));</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>下面是从服务器获取二进制文件的例子，使用<code>.blob()</code>方法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> displayImageAsync</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://www.example.com/image.jpg&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> blob</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">blob</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> img</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">    document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(img);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>下面是从服务器获取音频文件，直接解压播放的例子，使用<code>.arrayBuffer()</code>方法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> playAudioAsync</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://www.example.com/audio.mp3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> arrayBuffer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">arrayBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> audioBuffer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AudioContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">decodeAudioData</span><span style="color:#E1E4E8;">(arrayBuffer);</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> source</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AudioBufferSourceNode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> AudioContext</span><span style="color:#E1E4E8;">(), { buffer: audioBuffer });</span></span>
<span class="line"><span style="color:#E1E4E8;">    source.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> AudioContext</span><span style="color:#E1E4E8;">().destination);</span></span>
<span class="line"><span style="color:#E1E4E8;">    source.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="clone" tabindex="-1">clone() <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;clone()&quot;">​</a></h3><p><code>clone()</code>方法用来复制 Response 对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/flowers.jpg&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> res2</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> res1.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>复制以后，读取一个对象的数据，不会影响到另一个对象。</p><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h3 id="response-json" tabindex="-1">Response.json() <a class="header-anchor" href="#response-json" aria-label="Permalink to &quot;Response.json()&quot;">​</a></h3><p><code>Response.json()</code>返回一个 Response 实例，该实例对象的数据体就是作为参数的 JSON 数据，数据头的<code>Content-Type</code>字段自动设为<code>application/json</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">Response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">(data, options)</span></span></code></pre></div><p><code>Response.json()</code>基本上就是<code>Response()</code>构造函数的变体。</p><p>下面是示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> jsonResponse1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({ my: </span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> jsonResponse2</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { some: </span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, more: </span><span style="color:#9ECBFF;">&quot;information&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { status: </span><span style="color:#79B8FF;">307</span><span style="color:#E1E4E8;">, statusText: </span><span style="color:#9ECBFF;">&quot;Temporary Redirect&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="response-error" tabindex="-1">Response.error() <a class="header-anchor" href="#response-error" aria-label="Permalink to &quot;Response.error()&quot;">​</a></h3><p><code>Response.error()</code>用来构造一个表示报错的服务器回应，主要用在 Service worker，表示拒绝发送。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">self.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fetch&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(event.request.url);</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (url.pathname </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;/flowers.jpg&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">respondWith</span><span style="color:#E1E4E8;">(Response.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="response-redirect" tabindex="-1">Response.redirect() <a class="header-anchor" href="#response-redirect" aria-label="Permalink to &quot;Response.redirect()&quot;">​</a></h3><p><code>Response.redirect()</code>用来构造一个表示跳转的服务器回应，主要用在 Service worker，表示跳转到其他网址。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Response.</span><span style="color:#B392F0;">redirect</span><span style="color:#E1E4E8;">(url)</span></span>
<span class="line"><span style="color:#E1E4E8;">Response.</span><span style="color:#B392F0;">redirect</span><span style="color:#E1E4E8;">(url, status)</span></span></code></pre></div><p>这个方法的第一个参数<code>url</code>是所要跳转的目标网址，第二个参数是状态码，一般是301或302（默认值）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Response.</span><span style="color:#B392F0;">redirect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://www.example.com&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">302</span><span style="color:#E1E4E8;">);</span></span></code></pre></div>`,70)])])}const F=a(p,[["render",e]]);export{d as __pageData,F as default};
