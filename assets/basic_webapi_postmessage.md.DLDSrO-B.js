import{_ as a,c as n,b as e,o}from"./chunks/framework.E7rrtXIC.js";const y=JSON.parse('{"title":"window.postMessage() 方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"参数和返回值","slug":"参数和返回值","link":"#参数和返回值","children":[]},{"level":2,"title":"message 事件","slug":"message-事件","link":"#message-事件","children":[]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[]}],"relativePath":"basic/webapi/postmessage.md","filePath":"basic/webapi/postmessage.md"}'),p={name:"basic/webapi/postmessage.md"};function l(t,s,c,r,i,E){return o(),n("div",null,[...s[0]||(s[0]=[e(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/postmessage.md for this page in Markdown format</div><h1 id="window-postmessage-方法" tabindex="-1">window.postMessage() 方法 <a class="header-anchor" href="#window-postmessage-方法" aria-label="Permalink to &quot;window.postMessage() 方法&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><code>window.postMessage()</code>用于浏览器不同窗口之间的通信，主要包括 iframe 嵌入窗口和新开窗口两种情况。它不要求两个窗口同源，所以有着广泛的应用。</p><p><code>window.postMessage()</code>里面的<code>window</code>对象，是发送消息的目标窗口。比如，父窗口通过<code>window.open()</code>打开子窗口，那么子窗口可以通过<code>targetWindow = window.opener</code>获取父窗口。再比如，父窗口通过<code>iframe</code>嵌入了子窗口，那么子窗口可以通过<code>window.parent</code>获取父窗口。</p><h2 id="参数和返回值" tabindex="-1">参数和返回值 <a class="header-anchor" href="#参数和返回值" aria-label="Permalink to &quot;参数和返回值&quot;">​</a></h2><p><code>window.postMessage()</code>方法有几种使用形式。</p><p>最简单的一种就是直接发送消息。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(message)</span></span></code></pre></div><p>上面写法中的<code>message</code>就是发送的消息，可以是字符串，也可以是对象。如果是对象，浏览器会自动将该对象序列化，以字符串形式发送。</p><p>由于<code>window.postMessage()</code>可以用于任意两个源（协议+域名+端口）之间的通信，为了减少安全隐患，可以使用第二个参数<code>targetOrigin</code>，指定目标窗口的源。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(message, targetOrigin)</span></span></code></pre></div><p>上面写法中的<code>targetOrigin</code>是一个字符串，表示目标窗口里面的网页的源（origin），比如<code>https://example.com</code>。如果对目标窗口不加限制，可以省略这个参数，或者写成<code>*</code>。一旦指定了该参数，只有目标窗口符合指定的源（协议+域名+端口），目标窗口才会接收到消息发送事件。</p><p><code>window.postMessage()</code>还可以指定第三个参数，用于发送一些可传送物体（transferable object），比如 ArrayBuffer 对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(message, targetOrigin, transfer)</span></span></code></pre></div><p>上面写法中的<code>transfer</code>就是可传送物体。该物体一旦发送以后，所有权就转移到了目标窗口，当前窗口将无法再使用该物体。这样的设计是为了发送大量数据时，可以提高效率。</p><p><code>targetOrigin</code>和<code>transfer</code>这两个参数，也可以写在一个对象里面，作为第二个参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(message, { targetOrigin, transfer })</span></span></code></pre></div><p>下面是一个跟弹出窗口发消息的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> popup</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://example.com&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">popup.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello there!&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;http://example.com&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><code>window.postMessage()</code>方法没有返回值。</p><h2 id="message-事件" tabindex="-1">message 事件 <a class="header-anchor" href="#message-事件" aria-label="Permalink to &quot;message 事件&quot;">​</a></h2><p>当前窗口收到其他窗口发送的消息时，会发生 message 事件。通过监听该事件，可以接收对方发送的消息。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;message&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (event.origin </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &quot;http://example.com&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#79B8FF;">  false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>事件的监听函数，可以接收到一个 event 参数对象。该对象有如下属性。</p><ul><li>data：其他窗口发送的消息。</li><li>origin：发送该消息的窗口的源（协议+域名+端口）。</li><li>source：发送该消息的窗口对象的引用，使用该属性可以建立双向通信，下面是一个示例。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (event.origin </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &quot;http://example.com:8080&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.source.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;hi there!&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.origin,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><p>父页面是<code>origin1.com</code>，它打开了子页面<code>origin2.com</code>，并向其发送消息。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> sendMessage</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> otherWindow</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://origin2.com/origin2.html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> message</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Hello from Origin 1!&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> targetOrigin</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;https://origin2.com&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  otherWindow.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(message, targetOrigin);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>子页面<code>origin2.com</code>监听父页面发来的消息。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, receiveMessage, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> receiveMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (event.origin </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;https://origin1.com&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Received message: &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> event.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>下面是 iframe 嵌入窗口向父窗口<code>origin1.com</code>发送消息的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> sendMessage</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> message</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Hello from Child Window!&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.parent.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(message, </span><span style="color:#9ECBFF;">&#39;https://origin1.com&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,34)])])}const g=a(p,[["render",l]]);export{y as __pageData,g as default};
