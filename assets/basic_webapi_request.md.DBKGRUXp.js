import{_ as a,c as n,o as e,b as o}from"./chunks/framework.3z4p0y-m.js";const y=JSON.parse('{"title":"Request API","description":"","frontmatter":{},"headers":[{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"取出数据体的方法","slug":"取出数据体的方法","link":"#取出数据体的方法","children":[]},{"level":3,"title":"clone()","slug":"clone","link":"#clone","children":[]}]}],"relativePath":"basic/webapi/request.md","filePath":"basic/webapi/request.md"}'),l={name:"basic/webapi/request.md"};function p(c,s,t,r,i,E){return e(),n("div",null,[...s[0]||(s[0]=[o(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/request.md for this page in Markdown format</div><h1 id="request-api" tabindex="-1">Request API <a class="header-anchor" href="#request-api" aria-label="Permalink to &quot;Request API&quot;">​</a></h1><p>浏览器原生提供 Request() 构造函数，用来构造发给服务器的 HTTP 请求。它生成的 Response 实例，可以作为<code>fetch()</code>的参数。</p><p>注意，构造一个 Request 对象，只是构造出一个数据结构，本身并不会发出 HTTP 请求，只有将它传入<code>fetch()</code>方法才会真的发出请求。</p><h2 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h2><p>Request 作为构造函数的语法如下，返回一个 Request 实例对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(url: String, [init: Object]): Request</span></span></code></pre></div><p>它的第一个参数是请求的 URL 字符串，第二个参数是一个可选的配置对象，用来构造 HTTP 请求，该对象的类型描述如下。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#B392F0;">  body</span><span style="color:#E1E4E8;">: Object</span></span>
<span class="line"><span style="color:#B392F0;">  cache</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  credentials</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  headers</span><span style="color:#E1E4E8;">: Object</span></span>
<span class="line"><span style="color:#B392F0;">  integrity</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  keepalive</span><span style="color:#E1E4E8;">: Boolean</span></span>
<span class="line"><span style="color:#B392F0;">  method</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  mode</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  redirect</span><span style="color:#E1E4E8;">:	String</span></span>
<span class="line"><span style="color:#B392F0;">  referrer</span><span style="color:#E1E4E8;">:	String</span></span>
<span class="line"><span style="color:#B392F0;">  referrerPolicy</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  requestMode</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  requestCredentials</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#B392F0;">  signal</span><span style="color:#E1E4E8;">: AbortSignal</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>第二个参数配置对象的各个属性的含义如下。</p><ul><li><code>body</code>：HTTP 请求的数据体，必须是 Blob、BufferSource、FormData、String、URLSearchParams 类型之一。</li><li><code>cache</code>：请求的缓存模式。</li><li><code>credentials</code>：请求所用的凭证，可以设为 omit、same-origini、include。Chrome 47 之前，默认值为 same-origin；Chrome 47 之后，默认值为 include。</li><li><code>headers</code>：一个代表 HTTP 请求数据头的对象，类型为 Headers 对象实例。</li><li><code>integrity</code>：请求的资源的资源完整度验证值，比如<code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>。</li><li><code>method</code>：HTTP 方法，一般为<code>GET</code>、<code>POST</code>、<code>DELETE</code>，默认是<code>GET</code>。</li><li><code>mode</code>：请求模式，比如 cors、no-cors、navigate，默认为 cors。</li><li><code>redirect</code>：请求所用的模式，可以设为 error、follow、manual，默认为 follow。</li><li><code>referrer</code>：请求的来源，默认为 about:client。</li></ul><p>下面是两个示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 示例一</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> request</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flowers.jpg&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例二</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myInit</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;cors&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache: </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> request</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flowers.jpg&#39;</span><span style="color:#E1E4E8;">, myInit);</span></span></code></pre></div><p><code>Request()</code>还有另一种语法，第一个参数是另一个 Request 对象，第二个参数还是一个配置对象。它返回一个新的 Request 对象，相当于对第一个参数 Request 对象进行修改。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(request: Request, [init: Object]): Request</span></span></code></pre></div><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><p>Request 实例对象的属性，大部分就是它的构造函数第二个参数配置对象的属性。</p><p>（1）<code>body</code></p><p><code>body</code>属性返回 HTTP 请求的数据体，它的值是一个 ReadableStream 对象或 null（<code>GET</code>或<code>HEAD</code>请求时没有数据体）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> request</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/myEndpoint&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: </span><span style="color:#9ECBFF;">&quot;Hello world&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">request.body; </span><span style="color:#6A737D;">// ReadableStream 对象</span></span></code></pre></div><p>注意，Firefox 不支持该属性。</p><p>（2）<code>bodyused</code></p><p><code>bodyUsed</code>属性是一个布尔值，表示<code>body</code>是否已经被读取了。</p><p>（3）<code>cache</code></p><p><code>cache</code>属性是一个只读字符串，表示请求的缓存模式，可能的值有 default、force-cache、no-cache、no-store、only-if-cached、reload。</p><p>（4）<code>credentials</code></p><p><code>credentials</code>属性是一个只读字符串，表示跨域请求时是否携带其他域的 cookie。可能的值有 omit（不携带）、 include（携带）、same-origin（只携带同源 cookie）。</p><p>（5）<code>destination</code></p><p><code>destination</code>属性是一个字符串，表示请求内容的类型，可能的值有 &#39;&#39;、&#39;audio&#39;、&#39;audioworklet&#39;、&#39;document&#39;、&#39;embed&#39;、&#39;font&#39;、&#39;frame&#39;、&#39;iframe&#39;、&#39;image&#39;、&#39;manifest&#39;、&#39;object&#39;、&#39;paintworklet&#39;、 &#39;report&#39;、&#39;script&#39;、&#39;sharedworker&#39;、&#39;style&#39;、&#39;track&#39;、&#39;video&#39;、&#39;worker&#39;、&#39;xslt&#39; 等。</p><p>（6）<code>headers</code></p><p><code>headers</code>属性是一个只读的 Headers 实例对象，表示请求的数据头。</p><p>（7）<code>integrity</code></p><p><code>integrity</code>属性表示所请求资源的完整度的验证值。</p><p>（8）<code>method</code></p><p><code>method</code>属性是一个只读字符串，表示请求的方法（GET、POST 等）。</p><p>（9）<code>mode</code></p><p><code>mode</code>属性是一个只读字符串，用来验证是否可以有效地发出跨域请求，可能的值有 same-origin、no-cors、cors。</p><p>（10）<code>redirect</code></p><p><code>redirect</code>属性是一个只读字符串，表示重定向时的处理模式，可能的值有 follow、error、manual。</p><p>（11）<code>referrer</code></p><p><code>referrer</code>属性是一个只读字符串，表示请求的引荐 URL。</p><p>（12）<code>referrerPolicy</code></p><p><code>referrerPolicy</code>属性是一个只读字符串，决定了<code>referrer</code>属性是否要包含在请求里面的处理政策。</p><p>（13）<code>signal</code></p><p><code>signal</code>是一个只读属性，包含与当前请求相对应的中断信号 AbortSignal 对象。</p><p>（14）<code>url</code></p><p><code>url</code>是一个只读字符串，包含了当前请求的字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myRequest</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flowers.jpg&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myURL</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> myRequest.url;</span></span></code></pre></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="取出数据体的方法" tabindex="-1">取出数据体的方法 <a class="header-anchor" href="#取出数据体的方法" aria-label="Permalink to &quot;取出数据体的方法&quot;">​</a></h3><ul><li>arrayBuffer()：返回一个 Promise 对象，将 Request 的数据体作为 ArrayBuffer 对象返回。</li><li>blob()：返回一个 Promise 对象，将 Request 的数据体作为 Blob 对象返回。</li><li>json()：返回一个 Promise 对象，将 Request 的数据体作为 JSON 对象返回。</li><li>text()：返回一个 Promise 对象，将 Request 的数据体作为字符串返回。</li><li>formData()：返回一个 Promise 对象，将 Request 的数据体作为表单数据 FormData 对象返回。</li></ul><p>下面是<code>json()</code>方法的一个示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> obj</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { hello: </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> request</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/myEndpoint&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(obj),</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 处理 JSON 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p><code>.formData()</code>方法返回一个 Promise 对象，最终得到的是一个 FormData 表单对象，里面是用键值对表示的各种表单元素。该方法很少使用，因为需要拦截发给服务器的请求的场景不多，一般用在 Service Worker 拦截和处理网络请求，以修改表单数据，然后再发送到服务器。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">self.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fetch&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">event</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 拦截表单提交请求</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.request.method </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;POST&#39;</span><span style="color:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.request.headers.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">respondWith</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">handleFormSubmission</span><span style="color:#E1E4E8;">(event.request));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> handleFormSubmission</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">formData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;extra-field&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;extra-value&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> newRequest</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(request.url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    method: request.method,</span></span>
<span class="line"><span style="color:#E1E4E8;">    headers: request.headers,</span></span>
<span class="line"><span style="color:#E1E4E8;">    body: </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(formData)</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(newRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面示例中，Service Worker 拦截表单请求以后，添加了一个表单成员，再调用<code>fetch()</code>向服务器发出修改后的请求。</p><h3 id="clone" tabindex="-1">clone() <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;clone()&quot;">​</a></h3><p><code>clone()</code>用来复制 HTTP 请求对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myRequest</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flowers.jpg&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> newRequest</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> myRequest.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">();</span></span></code></pre></div>`,59)])])}const u=a(l,[["render",p]]);export{y as __pageData,u as default};
