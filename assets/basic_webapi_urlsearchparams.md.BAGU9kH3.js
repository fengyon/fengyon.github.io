import{_ as a,c as n,b as l,o as p}from"./chunks/framework.E7rrtXIC.js";const d=JSON.parse('{"title":"URLSearchParams 对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"append()","slug":"append","link":"#append","children":[]},{"level":3,"title":"delete()","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"get()","slug":"get","link":"#get","children":[]},{"level":3,"title":"getAll()","slug":"getall","link":"#getall","children":[]},{"level":3,"title":"has()","slug":"has","link":"#has","children":[]},{"level":3,"title":"set()","slug":"set","link":"#set","children":[]},{"level":3,"title":"sort()","slug":"sort","link":"#sort","children":[]},{"level":3,"title":"entries()","slug":"entries","link":"#entries","children":[]},{"level":3,"title":"forEach()","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"keys()","slug":"keys","link":"#keys","children":[]},{"level":3,"title":"values()","slug":"values","link":"#values","children":[]},{"level":3,"title":"toString()","slug":"tostring","link":"#tostring","children":[]}]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[{"level":3,"title":"size","slug":"size","link":"#size","children":[]}]}],"relativePath":"basic/webapi/urlsearchparams.md","filePath":"basic/webapi/urlsearchparams.md"}'),o={name:"basic/webapi/urlsearchparams.md"};function e(c,s,t,r,E,i){return p(),n("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/urlsearchparams.md for this page in Markdown format</div><h1 id="urlsearchparams-对象" tabindex="-1">URLSearchParams 对象 <a class="header-anchor" href="#urlsearchparams-对象" aria-label="Permalink to &quot;URLSearchParams 对象&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>URLSearchParams 对象表示 URL 的查询字符串（比如<code>?foo=bar</code>）。它提供一系列方法，用来操作这些键值对。URL 实例对象的<code>searchParams</code>属性，就是指向一个 URLSearchParams 实例对象。</p><p>URLSearchParams 实例对象可以用<code>for...of</code>进行遍历。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> mySearchParams) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h2><p>URLSearchParams 可以作为构造函数使用，生成一个实例对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>它可以接受一个查询字符串作为参数，将其转成对应的实例对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>注意，它最多只能去除查询字符串的开头问号<code>?</code>，并不能解析完整的网址字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> paramsString</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;http://example.com/search?query=%40&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(paramsString);</span></span></code></pre></div><p>上面示例中，URLSearchParams 会认为键名是<code>http://example.com/search?query</code>，而不是<code>query</code>。</p><p>它也可以接受表示键值对的对象或数组作为参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 参数为数组</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params3</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参数为对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">({ foo: </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, bar: </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;"> });</span></span></code></pre></div><p>浏览器向服务器发送表单数据时，可以直接使用 URLSearchParams 实例作为表单数据。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">({foo: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, bar: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/api&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: params</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>上面示例中，fetch 向服务器发送命令时，可以直接使用 URLSearchParams 实例对象作为数据体。</p><p>它还可以接受另一个 URLSearchParams 实例对象作为参数，等于复制了该对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params2</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(params1);</span></span></code></pre></div><p>上面示例中，<code>params1</code>和<code>params2</code>是两个一模一样的实例对象，但是修改其中一个，不会影响到另一个。</p><p>URLSearchParams会对查询字符串自动编码。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;你好&#39;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=%E4%BD%A0%E5%A5%BD&quot;</span></span></code></pre></div><p>上面示例中，<code>foo</code>的值是汉字，URLSearchParams 对其自动进行 URL 编码。</p><p>键名可以没有键值，这时 URLSearchParams 会认为键值等于空字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&amp;bar=baz&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params2</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo=&amp;bar=baz&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面示例中，<code>foo</code>是一个空键名，不管它后面有没有等号，URLSearchParams 都会认为它的值是一个空字符串。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="append" tabindex="-1">append() <a class="header-anchor" href="#append" aria-label="Permalink to &quot;append()&quot;">​</a></h3><p><code>append()</code>用来添加一个查询键值对。如果同名的键值对已经存在，它依然会将新的键值对添加到查询字符串的末尾。</p><p>它的第一个参数是键名，第二个参数是键值，下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;a=1&amp;b=2&amp;a=3&#39;</span></span></code></pre></div><p>上面示例中，键名<code>a</code>已经存在，但是<code>append()</code>依然会将<code>a=3</code>添加在查询字符串的末尾。</p><h3 id="delete" tabindex="-1">delete() <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete()&quot;">​</a></h3><p><code>delete()</code>删除给定名字的键值对。</p><h3 id="get" tabindex="-1">get() <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get()&quot;">​</a></h3><p><code>get()</code>返回指定键名所对应的键值。如果存在多个同名键值对，它只返回第一个键值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>对于不存在的键名，它会返回<code>null</code>。</p><p>注意，<code>get()</code>会将键值里面的加号转为空格。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`c=a+b\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;a b&#39;</span></span></code></pre></div><p>上面示例中，<code>get()</code>将<code>a+b</code>转为<code>a b</code>。如果希望避免这种行为，可以先用<code>encodeURIComponent()</code>对键值进行转义。</p><h3 id="getall" tabindex="-1">getAll() <a class="header-anchor" href="#getall" aria-label="Permalink to &quot;getAll()&quot;">​</a></h3><p><code>getAll()</code>返回一个数组，里面是指定键名所对应的所有键值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&amp;a=3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">getAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [ &#39;1&#39;, &#39;3&#39; ]</span></span></code></pre></div><h3 id="has" tabindex="-1">has() <a class="header-anchor" href="#has" aria-label="Permalink to &quot;has()&quot;">​</a></h3><p><code>has()</code>返回一个布尔值，表示指定键名是否存在。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="set" tabindex="-1">set() <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set()&quot;">​</a></h3><p><code>set()</code>用来设置一个键值对。如果相同键名已经存在，则会替换当前值，这是它与<code>append()</code>的不同之处。该方法适合用来修改查询字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;a=3&amp;b=2&#39;</span></span></code></pre></div><p>上面示例中，<code>set()</code>修改了键<code>a</code>。</p><p>如果有多个的同名键，<code>set()</code>会移除现存所有的键，再添加新的键值对。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=1&amp;foo=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=3&quot;</span></span></code></pre></div><p>上面示例中，有两个<code>foo</code>键，<code>set()</code>会将它们都删掉，再添加一个新的<code>foo</code>键。</p><h3 id="sort" tabindex="-1">sort() <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort()&quot;">​</a></h3><p><code>sort()</code>按照键名（以 Unicode 码点为序）对键值对排序。如果有同名键值对，它们的顺序不变。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?a=1&amp;b=2&amp;a=3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;a=1&amp;a=3&amp;b=2&#39;</span></span></code></pre></div><h3 id="entries" tabindex="-1">entries() <a class="header-anchor" href="#entries" aria-label="Permalink to &quot;entries()&quot;">​</a></h3><p><code>entries()</code>方法返回一个 iterator 对象，用来遍历键名和键值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1=value1&amp;key2=value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}, \${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// key1, value1</span></span>
<span class="line"><span style="color:#6A737D;">// key2, value2</span></span></code></pre></div><p>如果直接对 URLSearchParams 实例进行<code>for...of</code>遍历，其实内部调用的就是<code>entries</code>接口。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params) {}</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {}</span></span></code></pre></div><h3 id="foreach" tabindex="-1">forEach() <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach()&quot;">​</a></h3><p><code>forEach()</code>用来依次对每个键值对执行一个回调函数。</p><p>它接受两个参数，第一个参数<code>callback</code>是回调函数，第二个参数<code>thisArg</code>是可选的，用来设置<code>callback</code>里面的<code>this</code>对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(callback)</span></span>
<span class="line"><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(callback, thisArg)</span></span></code></pre></div><p><code>callback</code>函数可以接收到以下三个参数。</p><ul><li>value：当前键值。</li><li>key：当前键名。</li><li>searchParams：当前的 URLSearchParams 实例对象。</li></ul><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1=value1&amp;key2=value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(value, key);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// value1 key1</span></span>
<span class="line"><span style="color:#6A737D;">// value2 key2</span></span></code></pre></div><h3 id="keys" tabindex="-1">keys() <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;keys()&quot;">​</a></h3><p><code>keys()</code>返回一个 iterator 对象，用来遍历所有键名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1=value1&amp;key2=value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// key1</span></span>
<span class="line"><span style="color:#6A737D;">// key2</span></span></code></pre></div><h3 id="values" tabindex="-1">values() <a class="header-anchor" href="#values" aria-label="Permalink to &quot;values()&quot;">​</a></h3><p><code>values()</code>返回一个 iterator 对象，用来遍历所有键值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1=value1&amp;key2=value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> value</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// value1</span></span>
<span class="line"><span style="color:#6A737D;">// value2</span></span></code></pre></div><p>这个方法也可以用来将所有键值，转成一个数组。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(params.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// [&#39;value1&#39;, &#39;value2&#39;]</span></span></code></pre></div><h3 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h3><p><code>toString()</code>用来将 URLSearchParams 实例对象转成一个字符串。它返回的字符串不带问号，这一点与<code>window.location.search</code>不同。</p><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h3 id="size" tabindex="-1">size <a class="header-anchor" href="#size" aria-label="Permalink to &quot;size&quot;">​</a></h3><p><code>size</code>是一个只读属性，返回键值对的总数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> params</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c=4&amp;a=2&amp;b=3&amp;a=1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.size; </span><span style="color:#6A737D;">// 4</span></span></code></pre></div><p>上面示例中，键名<code>a</code>在查询字符串里面有两个，<code>size</code>不会将它们合并。</p><p>如果想统计不重复的键名，可以将使用 Set 结构。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">...new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">(params.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">())].</span><span style="color:#79B8FF;">length</span><span style="color:#6A737D;"> // 3</span></span></code></pre></div><p><code>size</code>属性可以用来判别，某个网址是否有查询字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> url</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com?foo=1&amp;bar=2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.searchParams.size) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;该 URL 有查询字符串&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,91)])])}const F=a(o,[["render",e]]);export{d as __pageData,F as default};
