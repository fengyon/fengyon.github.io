import{_ as a,c as n,o as e,b as l}from"./chunks/framework.3z4p0y-m.js";const y=JSON.parse('{"title":"Web Audio API","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":2,"title":"context.createBuffer()","slug":"context-createbuffer","link":"#context-createbuffer","children":[]},{"level":2,"title":"过滤器","slug":"过滤器","link":"#过滤器","children":[]}],"relativePath":"basic/webapi/webaudio.md","filePath":"basic/webapi/webaudio.md"}'),o={name:"basic/webapi/webaudio.md"};function p(t,s,c,r,i,d){return e(),n("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/webaudio.md for this page in Markdown format</div><h1 id="web-audio-api" tabindex="-1">Web Audio API <a class="header-anchor" href="#web-audio-api" aria-label="Permalink to &quot;Web Audio API&quot;">​</a></h1><p>Web Audio API 用于操作声音。这个 API 可以让网页发出声音。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>浏览器原生提供<code>AudioContext</code>对象，该对象用于生成一个声音的上下文，与扬声器相连。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> audioContext</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AudioContext</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>然后，获取音源文件，将其在内存中解码，就可以播放声音了。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> context</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AudioContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sound.mp4&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">arrayBuffer</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arrayBuffer</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">decodeAudioData</span><span style="color:#E1E4E8;">(arrayBuffer))</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">audioBuffer</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 播放声音</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> source</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">createBufferSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    source.buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> audioBuffer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    source.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(context.destination);</span></span>
<span class="line"><span style="color:#E1E4E8;">    source.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre></div><h2 id="context-createbuffer" tabindex="-1">context.createBuffer() <a class="header-anchor" href="#context-createbuffer" aria-label="Permalink to &quot;context.createBuffer()&quot;">​</a></h2><p><code>context.createBuffer()</code>方法生成一个内存的操作视图，用于存放数据。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> buffer</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> audioContext.</span><span style="color:#B392F0;">createBuffer</span><span style="color:#E1E4E8;">(channels, signalLength, sampleRate);</span></span></code></pre></div><p><code>createBuffer</code>方法接受三个参数。</p><ul><li>channels：整数，表示声道。创建单声道的声音，该值为 1。</li><li>signalLength：整数，表示声音数组的长度。</li><li>sampleRate：浮点数，表示取样率，即一秒取样多少次。</li></ul><p><code>signalLength</code>和<code>sampleRate</code>这两个参数决定了声音的长度。比如，如果取样率是<code>1/3000</code>（每秒取样3000次），声音数组长度是6000，那么播放的声音是2秒长度。</p><p>接着，使用<code>buffer.getChannelData</code>方法取出一个声道。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> buffer.</span><span style="color:#B392F0;">getChannelData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>上面代码中，<code>buffer.getChannelData</code>的参数<code>0</code>表示取出第一个声道。</p><p>下一步，将声音数组放入这个声道。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> buffer.</span><span style="color:#B392F0;">getChannelData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// singal 是一个声音数组</span></span>
<span class="line"><span style="color:#6A737D;">// singalLengal 是该数组的长度</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> signalLength; i </span><span style="color:#F97583;">+=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  data[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> signal[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>最后，使用<code>context.createBufferSource</code>方法生成一个声音节点。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 生成一个声音节点</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> node</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> audioContext.</span><span style="color:#B392F0;">createBufferSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 将声音数组的内存对象，放入这个节点</span></span>
<span class="line"><span style="color:#E1E4E8;">node.buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buffer;</span></span>
<span class="line"><span style="color:#6A737D;">// 将声音上下文与节点连接</span></span>
<span class="line"><span style="color:#E1E4E8;">node.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(audioContext.destination);</span></span>
<span class="line"><span style="color:#6A737D;">// 开始播放声音</span></span>
<span class="line"><span style="color:#E1E4E8;">node.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(audioContext.currentTime);</span></span></code></pre></div><p>默认情况下，播放一次后就将停止播放。如果需要循环播放，可以将节点对象的<code>looping</code>属性设为<code>true</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">node.looping </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h2 id="过滤器" tabindex="-1">过滤器 <a class="header-anchor" href="#过滤器" aria-label="Permalink to &quot;过滤器&quot;">​</a></h2><p>Web Audio API 原生提供了一些过滤器（filter），用来处理声音。</p><p>首先，使用<code>context.createBiquadFilter</code>方法建立过滤器实例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> filter</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> audioContext.</span><span style="color:#B392F0;">createBiquadFilter</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>然后，通过<code>filter.type</code>属性指定过滤器的类型。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">filter.type </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;lowpass&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p>目前，过滤器有以下这些类型。</p><ul><li>lowpass</li><li>highpass</li><li>bandpass</li><li>lowshelf</li><li>highshelf</li><li>peaking</li><li>notch</li><li>allpass</li></ul><p>然后指定过滤器的频率（frequency）属性。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">filter.frequency.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> frequency</span></span></code></pre></div><p>最后，过滤器实例连接节点实例，就可以生效了。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">sourceNode.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(filter);</span></span></code></pre></div>`,35)])])}const u=a(o,[["render",p]]);export{y as __pageData,u as default};
