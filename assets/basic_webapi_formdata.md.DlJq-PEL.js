import{_ as a,c as n,b as l,o as p}from"./chunks/framework.E7rrtXIC.js";const d=JSON.parse('{"title":"FormData 对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"append()","slug":"append","link":"#append","children":[]},{"level":3,"title":"delete()","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"entries()","slug":"entries","link":"#entries","children":[]},{"level":3,"title":"get()","slug":"get","link":"#get","children":[]},{"level":3,"title":"getAll()","slug":"getall","link":"#getall","children":[]},{"level":3,"title":"has()","slug":"has","link":"#has","children":[]},{"level":3,"title":"keys()","slug":"keys","link":"#keys","children":[]},{"level":3,"title":"set()","slug":"set","link":"#set","children":[]},{"level":3,"title":"values()","slug":"values","link":"#values","children":[]}]}],"relativePath":"basic/webapi/formdata.md","filePath":"basic/webapi/formdata.md"}'),o={name:"basic/webapi/formdata.md"};function e(t,s,c,r,E,y){return p(),n("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/formdata.md for this page in Markdown format</div><h1 id="formdata-对象" tabindex="-1">FormData 对象 <a class="header-anchor" href="#formdata-对象" aria-label="Permalink to &quot;FormData 对象&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>FormData 代表表单数据，是浏览器的原生对象。</p><p>它可以当作构造函数使用，构造一个表单实例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>上面示例中，<code>FormData()</code>当作构造函数使用，返回一个空的表单实例对象。</p><p>它也可以接受一个表单的 DOM 节点当作参数，将表单的所有元素及其值，转换成一个个键值对，包含在返回的实例对象里面。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">(form);</span></span></code></pre></div><p>上面示例中，<code>FormData()</code>的参数<code>form</code>就是一个表单的 DOM 节点对象。</p><p>下面是用法示例，通过脚本发送表单数据。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">form</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;formElem&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;firstName&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Picture: &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;picture&quot;</span><span style="color:#B392F0;"> accept</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image/*&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;submit&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  formElem.</span><span style="color:#B392F0;">onsubmit</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/article/formdata/post/user-avatar&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      method: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      body: </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">(formElem)</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    alert</span><span style="color:#E1E4E8;">(result.message);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>浏览器向服务器发送表单数据时，不管是用户点击 Submit 按钮发送，还是使用脚本发送，都会自动将其编码，并以<code>Content-Type: multipart/form-data</code>的形式发送。</p><p><code>FormData()</code>还有第三种用法，如果想把“提交”（Submit）按钮也加入表单的键值对，可以把按钮的 DOM 节点当作<code>FormData()</code>的第二个参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">(form, submitter)</span></span></code></pre></div><p>上面代码中，<code>submitter</code>就是提交按钮的 DOM 节点。这种用法适合表单有多个提交按钮，服务端需要通过按钮的值来判断，用户到底选用了哪个按钮。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 表单有两个提交按钮</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;button name=&quot;intent&quot; value=&quot;save&quot;&gt;Save&lt;/button&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;button name=&quot;intent&quot; value=&quot;saveAsCopy&quot;&gt;Save As Copy&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> form</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;form&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> submitter</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button[value=save]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">(form, submitter);</span></span></code></pre></div><p>上面示例中，<code>FormData()</code>加入了第二个参数，实例对象<code>formData</code>就会增加一个键值对，键名为<code>intent</code>，键值为<code>save</code>。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="append" tabindex="-1">append() <a class="header-anchor" href="#append" aria-label="Permalink to &quot;append()&quot;">​</a></h3><p><code>append()</code>用于添加一个键值对，即添加一个表单元素。它有两种使用形式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(name, value)</span></span>
<span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(name, blob, fileName)</span></span></code></pre></div><p>它的第一个参数是键名，第二个参数是键值。上面的第二种形式<code>FormData.append(name, blob, fileName)</code>，相当于添加一个文件选择器<code>&lt;input type=&quot;file&quot;&gt;</code>，第二个参数<code>blob</code>是文件的二进制内容，第三个参数<code>fileName</code>是文件名。</p><p>如果键名已经存在，它会为其添加新的键值，即同一个键名有多个键值。</p><p>下面是一个用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> formData </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;key1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;key2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [name, value] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> formData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">} = \${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// key1 = value1</span></span>
<span class="line"><span style="color:#6A737D;">// key2 = value2</span></span></code></pre></div><p>下面是添加二进制文件的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;canvas id=&quot;canvasElem&quot; width=&quot;100&quot; height=&quot;80&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> imageBlob </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> new</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  resolve</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> canvasElem.</span><span style="color:#B392F0;">toBlob</span><span style="color:#E1E4E8;">(resolve, </span><span style="color:#9ECBFF;">&#39;image/png&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> formData </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image&#39;</span><span style="color:#E1E4E8;">, imageBlob, </span><span style="color:#9ECBFF;">&#39;image.png&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/article/formdata/post/image-form&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: formData</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span></code></pre></div><p>下面是添加 XML 文件的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> content</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;&lt;q id=&quot;a&quot;&gt;&lt;span id=&quot;b&quot;&gt;hey!&lt;/span&gt;&lt;/q&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> blob</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Blob</span><span style="color:#E1E4E8;">([content], { type: </span><span style="color:#9ECBFF;">&quot;text/xml&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;userfile&#39;</span><span style="color:#E1E4E8;">, blob);</span></span></code></pre></div><h3 id="delete" tabindex="-1">delete() <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete()&quot;">​</a></h3><p><code>delete()</code>用于删除指定的键值对，它的参数为键名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(name);</span></span></code></pre></div><h3 id="entries" tabindex="-1">entries() <a class="header-anchor" href="#entries" aria-label="Permalink to &quot;entries()&quot;">​</a></h3><p><code>entries()</code>返回一个迭代器，用于遍历所有键值对。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p>下面是一个用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> form</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#subscription&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">(form);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> values</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(values);</span></span></code></pre></div><p>下面是使用<code>entries()</code>遍历键值对的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pair</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> formData.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">pair</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}, \${</span><span style="color:#E1E4E8;">pair</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// key1, value1</span></span>
<span class="line"><span style="color:#6A737D;">// key2, value2</span></span></code></pre></div><h3 id="get" tabindex="-1">get() <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get()&quot;">​</a></h3><p><code>get()</code>用于获取指定键名的键值，它的参数为键名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name)</span></span></code></pre></div><p>如果该键名有多个键值，只返回第一个键值。如果找不到指定键名，则返回<code>null</code>。</p><h3 id="getall" tabindex="-1">getAll() <a class="header-anchor" href="#getall" aria-label="Permalink to &quot;getAll()&quot;">​</a></h3><p><code>getAll()</code>用于获取指定键名的所有键值，它的参数为键名，返回值为一个数组。如果找不到指定键名，则返回一个空数组。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">getAll</span><span style="color:#E1E4E8;">(name)</span></span></code></pre></div><h3 id="has" tabindex="-1">has() <a class="header-anchor" href="#has" aria-label="Permalink to &quot;has()&quot;">​</a></h3><p><code>has()</code>返回一个布尔值，表示是否存在指定键名，它的参数为键名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(name)</span></span></code></pre></div><h3 id="keys" tabindex="-1">keys() <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;keys()&quot;">​</a></h3><p><code>keys()</code>返回一个键名的迭代器，用于遍历所有键名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> formData.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// key1</span></span>
<span class="line"><span style="color:#6A737D;">// key2</span></span></code></pre></div><h3 id="set" tabindex="-1">set() <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set()&quot;">​</a></h3><p><code>set()</code>用于为指定键名设置新的键值。它有两种使用形式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(name, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(name, blob, fileName);</span></span></code></pre></div><p>它的第一个参数为键名，第二个参数为键值。上面第二种形式为上传文件，第二个参数<code>blob</code>为文件的二进制内容，第三个参数<code>fileName</code>为文件名。该方法没有返回值。</p><p>如果指定键名不存在，它会添加该键名，否则它会丢弃所有现有的键值，确保一个键名只有一个键值。这是它跟<code>append()</code>的主要区别。</p><h3 id="values" tabindex="-1">values() <a class="header-anchor" href="#values" aria-label="Permalink to &quot;values()&quot;">​</a></h3><p><code>values()</code>返回一个键值的迭代器，用于遍历所有键值。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FormData.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p>下面是用法示例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> formData</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FormData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">formData.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> value</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> formData.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// value1</span></span>
<span class="line"><span style="color:#6A737D;">// value2</span></span></code></pre></div>`,65)])])}const F=a(o,[["render",e]]);export{d as __pageData,F as default};
