import{_ as n,c as a,o as l,b as p}from"./chunks/framework.3z4p0y-m.js";const d=JSON.parse('{"title":"Web Components","description":"","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Custom Element","slug":"custom-element","link":"#custom-element","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"生命周期方法","slug":"生命周期方法","link":"#生命周期方法","children":[]},{"level":3,"title":"自定义属性和方法","slug":"自定义属性和方法","link":"#自定义属性和方法","children":[]},{"level":3,"title":"window.customElements.whenDefined()","slug":"window-customelements-whendefined","link":"#window-customelements-whendefined","children":[]},{"level":3,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":3,"title":"Custom Element 的子元素","slug":"custom-element-的子元素","link":"#custom-element-的子元素","children":[]}]},{"level":2,"title":"<template>标签","slug":"template-标签","link":"#template-标签","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"document.importNode()","slug":"document-importnode","link":"#document-importnode","children":[]}]},{"level":2,"title":"Shadow DOM","slug":"shadow-dom","link":"#shadow-dom","children":[]},{"level":2,"title":"HTML Import","slug":"html-import","link":"#html-import","children":[{"level":3,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":3,"title":"脚本的执行","slug":"脚本的执行","link":"#脚本的执行","children":[]},{"level":3,"title":"Web Component的封装","slug":"web-component的封装","link":"#web-component的封装","children":[]}]},{"level":2,"title":"Polymer.js","slug":"polymer-js","link":"#polymer-js","children":[{"level":3,"title":"直接使用的组件","slug":"直接使用的组件","link":"#直接使用的组件","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"自定义组件","slug":"自定义组件","link":"#自定义组件","children":[]},{"level":3,"title":"组件的使用方法","slug":"组件的使用方法","link":"#组件的使用方法","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"basic/webapi/webcomponents.md","filePath":"basic/webapi/webcomponents.md"}'),o={name:"basic/webapi/webcomponents.md"};function e(t,s,c,E,r,y){return l(),a("div",null,[...s[0]||(s[0]=[p(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/webcomponents.md for this page in Markdown format</div><h1 id="web-components" tabindex="-1">Web Components <a class="header-anchor" href="#web-components" aria-label="Permalink to &quot;Web Components&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>各种网站往往需要一些相同的模块，比如日历、调色板等等，这种模块就被称为“组件”（component）。Web Components 就是浏览器原生的组件规范。</p><p>采用组件开发，有很多优点。</p><p>（1）有利于代码复用。组件是模块化编程思想的体现，可以跨平台、跨框架使用，构建、部署和与其他 UI 元素互动都有统一做法。</p><p>（2）使用非常容易。加载或卸载组件，只要添加或删除一行代码就可以了。</p><p>（3）开发和定制很方便。组件开发不需要使用框架，只要用原生的语法就可以了。开发好的组件往往留出接口，供使用者设置常见属性，比如上面代码的<code>heading</code>属性，就是用来设置对话框的标题。</p><p>（4）组件提供了 HTML、CSS、JavaScript 封装的方法，实现了与同一页面上其他代码的隔离。</p><p>未来的网站开发，可以像搭积木一样，把组件合在一起，就组成了一个网站。这种前景是非常诱人的。</p><p>Web Components 不是单一的规范，而是一系列的技术组成，以下是它的四个构成。</p><ul><li>Custom Elements</li><li>Template</li><li>Shadow DOM</li><li>HTML Import</li></ul><p>使用时，并不一定上面四种 API 都要用到。其中，Custom Element 和 Shadow DOM 比较重要，Template 和 HTML Import 只起到辅助作用。</p><h2 id="custom-element" tabindex="-1">Custom Element <a class="header-anchor" href="#custom-element" aria-label="Permalink to &quot;Custom Element&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>HTML 标准定义的网页元素，有时并不符合我们的需要，这时浏览器允许用户自定义网页元素，这就叫做 Custom Element。简单说，它就是用户自定义的网页元素，是 Web components 技术的核心。</p><p>举例来说，你可以自定义一个叫做<code>&lt;my-element&gt;</code>的网页元素。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意，自定义网页元素的标签名必须含有连字符<code>-</code>，一个或多个连字符都可以。这是因为浏览器内置的的 HTML 元素标签名，都不含有连字符，这样可以做到有效区分。</p><p>下面的代码先定义一个自定义元素的类。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">attachShadow</span><span style="color:#E1E4E8;">( { mode: </span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;"> } );</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.shadowRoot.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> \`</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;style&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        /* scoped styles */</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;/style&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;slot&gt;&lt;/slot&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  static</span><span style="color:#F97583;"> get</span><span style="color:#B392F0;"> observedAttributes</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // Return list of attributes to watch.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  attributeChangedCallback</span><span style="color:#E1E4E8;">( </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldValue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#6A737D;">    // Run functionality when one of these attributes is changed.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  connectedCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // Run functionality when an instance of this element is inserted into the DOM.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  disconnectedCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // Run functionality when an instance of this element is removed from the DOM.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码有几个注意点。</p><ul><li>自定义元素类的基类是<code>HTMLElement</code>。当然也可以根据需要，基于<code>HTMLElement</code>的子类，比如<code>HTMLButtonElement</code>。</li><li>构造函数内部定义了 Shadow DOM。所谓<code>Shadow DOM</code>指的是，这部分的 HTML 代码和样式，不直接暴露给用户。</li><li>类可以定义生命周期方法，比如<code>connectedCallback()</code>。</li></ul><p>然后，<code>window.customElements.define()</code>方法，用来登记自定义元素与这个类之间的映射。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-element&#39;</span><span style="color:#E1E4E8;">, MyElement);</span></span></code></pre></div><p>登记以后，页面上的每一个<code>&lt;my-element&gt;</code>元素都是一个<code>MyElement</code>类的实例。只要浏览器解析到<code>&lt;my-element&gt;</code>元素，就会运行<code>MyElement</code>的构造函数。</p><p>注意，如果没有登记就使用 Custom Element，浏览器会认为这是一个不认识的元素，会当做空的 div 元素处理。</p><p><code>window.customElements.define()</code>方法定义了 Custom Element 以后，可以使用<code>window.customeElements.get()</code>方法获取该元素的构造方法。这使得除了直接插入 HTML 网页，Custom Element 也能使用脚本插入网页。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;my-element&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">  class</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> window.customElements.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-element&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myElement</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> el</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(myElement);</span></span></code></pre></div><p>如果你想扩展现有的 HTML 元素（比如<code>&lt;button&gt;</code>）也是可以的。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> GreetingElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLButtonElement</span></span></code></pre></div><p>登记的时候，需要提供扩展的元素。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hey-there&#39;</span><span style="color:#E1E4E8;">, GreetingElement, { extends: </span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;"> });</span></span></code></pre></div><p>使用的时候，为元素加上<code>is</code>属性就可以了。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hey-there&quot;</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">&gt;Howdy&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="生命周期方法" tabindex="-1">生命周期方法 <a class="header-anchor" href="#生命周期方法" aria-label="Permalink to &quot;生命周期方法&quot;">​</a></h3><p>Custom Element 提供一些生命周期方法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  connectedCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // here the element has been inserted into the DOM</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，<code>connectedCallback()</code>方法就是<code>MyElement</code>元素的生命周期方法。每次，该元素插入 DOM，就会自动执行该方法。</p><ul><li><code>connectedCallback()</code>：插入 DOM 时调用。这可能不止一次发生，比如元素被移除后又重新添加。类的设置应该尽量放到这个方法里面执行，因为这时各种属性和子元素都可用。</li><li><code>disconnectedCallback()</code>：移出 DOM 时执行。</li><li><code>attributeChangedCallback(attrName, oldVal, newVal)</code>：添加、删除、更新或替换属性时调用。元素创建或升级时，也会调用。注意：只有加入<code>observedAttributes</code>的属性才会执行这个方法。</li><li><code>adoptedCallback()</code>：自定义元素移动到新的 document 时调用，比如执行<code>document.adoptNode(element)</code>时。</li></ul><p>下面是一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> GreetingElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">._name </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Stranger&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  connectedCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">e</span><span style="color:#F97583;"> =&gt;</span><span style="color:#B392F0;"> alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Hello, \${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">_name</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  attributeChangedCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">attrName</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldValue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (attrName </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;name&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (newValue) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">._name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">._name </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Stranger&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">GreetingElement.observedAttributes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hey-there&#39;</span><span style="color:#E1E4E8;">, GreetingElement);</span></span></code></pre></div><p>上面代码中，<code>GreetingElement.observedAttributes</code>属性用来指定白名单里面的属性，上例是<code>name</code>属性。只要这个属性的值发生变化，就会自动调用<code>attributeChangedCallback</code>方法。</p><p>使用上面这个类的方法如下。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">hey-there</span><span style="color:#E1E4E8;">&gt;Greeting&lt;/</span><span style="color:#85E89D;">hey-there</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">hey-there</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Potch&quot;</span><span style="color:#E1E4E8;">&gt;Personalized Greeting&lt;/</span><span style="color:#85E89D;">hey-there</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>attributeChangedCallback</code>方法主要用于外部传入的属性，就像上面例子中<code>name=&quot;Potch&quot;</code>。</p><p>生命周期方法调用的顺序如下：<code>constructor</code> -&gt; <code>attributeChangedCallback</code> -&gt; <code>connectedCallback</code>，即<code>attributeChangedCallback</code>早于<code>connectedCallback</code>执行。这是因为<code>attributeChangedCallback</code>相当于调整配置，应该在插入 DOM 之前完成。</p><p>下面的例子能够更明显地看出这一点，在插入 DOM 前修改 Custome Element 的颜色。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.container </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.shadowRoot.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  attributeChangedCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;">(attr </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;disabled&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hasAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        this.container.style.background </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;#808080&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } else {</span></span>
<span class="line"><span style="color:#E1E4E8;">        this.container.style.background </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;#ffffff&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="自定义属性和方法" tabindex="-1">自定义属性和方法 <a class="header-anchor" href="#自定义属性和方法" aria-label="Permalink to &quot;自定义属性和方法&quot;">​</a></h3><p>Custom Element 允许自定义属性或方法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  doSomething</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // do something in this method</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，<code>doSomething()</code>就是<code>MyElement</code>的自定义方法，使用方法如下。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> element</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-element&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><p>自定义属性可以使用 JavaScript class 的所有语法，因此也可以设置取值器和赋值器。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  set</span><span style="color:#B392F0;"> disabled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">isDisabled</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;">(isDisabled) {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">removeAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  get</span><span style="color:#B392F0;"> disabled</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hasAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中的取值器和赋值器，可用于<code>&lt;my-input name=&quot;name&quot; disabled&gt;</code>这样的用法。</p><h3 id="window-customelements-whendefined" tabindex="-1">window.customElements.whenDefined() <a class="header-anchor" href="#window-customelements-whendefined" aria-label="Permalink to &quot;window.customElements.whenDefined()&quot;">​</a></h3><p><code>window.customElements.whenDefined()</code>方法在一个 Custom Element 被<code>customElements.define()</code>方法定义以后执行，用于“升级”一个元素。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">window.customElements.</span><span style="color:#B392F0;">whenDefined</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-element&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // my-element is now defined</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>如果某个属性值发生变化时，需要做出反应，可以将它放入<code>observedAttributes</code>数组。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  static</span><span style="color:#F97583;"> get</span><span style="color:#B392F0;"> observedAttributes</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> shadowRoot</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">attachShadow</span><span style="color:#E1E4E8;">({mode: </span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    shadowRoot.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> \`</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;style&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        .disabled {</span></span>
<span class="line"><span style="color:#9ECBFF;">          opacity: 0.4;</span></span>
<span class="line"><span style="color:#9ECBFF;">        }</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;/style&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.container </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">shadowRoot</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  attributeChangedCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;">(attr </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;disabled&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.disabled) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.container.classList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.container.classList.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;disabled&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-label="Permalink to &quot;回调函数&quot;">​</a></h3><p>自定义元素的原型有一些属性，用来指定回调函数，在特定事件发生时触发。</p><ul><li><strong>createdCallback</strong>：实例生成时触发</li><li><strong>attachedCallback</strong>：实例插入HTML文档时触发</li><li><strong>detachedCallback</strong>：实例从HTML文档移除时触发</li><li><strong>attributeChangedCallback(attrName, oldVal, newVal)</strong>：实例的属性发生改变时（添加、移除、更新）触发</li></ul><p>下面是一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> proto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HTMLElement</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">proto.</span><span style="color:#B392F0;">createdCallback</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">  this</span><span style="color:#E1E4E8;">.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;This is a my-demo element!&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">proto.</span><span style="color:#B392F0;">attachedCallback</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;attached&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> XFoo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">registerElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;x-foo&#39;</span><span style="color:#E1E4E8;">, {prototype: proto});</span></span></code></pre></div><p>利用回调函数，可以方便地在自定义元素中插入HTML语句。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> XFooProto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HTMLElement</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">XFooProto.</span><span style="color:#B392F0;">createdCallback</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">  this</span><span style="color:#E1E4E8;">.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;&lt;b&gt;I&#39;m an x-foo-with-markup!&lt;/b&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> XFoo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">registerElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;x-foo-with-markup&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {prototype: XFooProto});</span></span></code></pre></div><p>上面代码定义了createdCallback回调函数，生成实例时，该函数运行，插入如下的HTML语句。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">x-foo-with-markup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">b</span><span style="color:#E1E4E8;">&gt;I&#39;m an x-foo-with-markup!&lt;/</span><span style="color:#85E89D;">b</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">x-foo-with-markup</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="custom-element-的子元素" tabindex="-1">Custom Element 的子元素 <a class="header-anchor" href="#custom-element-的子元素" aria-label="Permalink to &quot;Custom Element 的子元素&quot;">​</a></h3><p>用户使用 Custom Element 时候，可以在内部放置子元素。Custom Element 提供<code>&lt;slot&gt;</code>用来引用内部内容。</p><p>下面的<code>&lt;image-gallery&gt;</code>是一个 Custom Element。用户在里面放置了子元素。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">image-gallery</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">img</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;foo.jpg&quot;</span><span style="color:#B392F0;"> slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">img</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;bar.jpg&quot;</span><span style="color:#B392F0;"> slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">image-gallery</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>&lt;image-gallery&gt;</code>内部的模板如下。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;images&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>最终合成的代码如下。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;images&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">img</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;foo.jpg&quot;</span><span style="color:#B392F0;"> slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">img</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;bar.jpg&quot;</span><span style="color:#B392F0;"> slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="template-标签" tabindex="-1"><code>&lt;template&gt;</code>标签 <a class="header-anchor" href="#template-标签" aria-label="Permalink to &quot;\`&lt;template&gt;\`标签&quot;">​</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p><code>&lt;template&gt;</code>标签表示组件的 HTML 代码模板。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;This won&#39;t display!&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this won&#39;t alert!&quot;</span><span style="color:#E1E4E8;">);&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>&lt;template&gt;</code>内部就是正常的 HTML 代码，浏览器不会将这些代码加入 DOM。</p><p>下面的代码会将模板内部的代码插入 DOM。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;template&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(template.content);</span></span></code></pre></div><p>注意，模板内部的代码只能插入一次，如果第二次执行上面的代码就会报错。</p><p>如果需要多次插入模板，可以复制<code>&lt;template&gt;</code>内部代码，然后再插入。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(template.content.</span><span style="color:#B392F0;">cloneNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span></code></pre></div><p>上面代码中，<code>cloneNode()</code>方法的参数<code>true</code>表示复制包含所有子节点。</p><p>接受<code>&lt;template&gt;</code>插入的元素，叫做宿主元素（host）。在<code>&lt;template&gt;</code>之中，可以对宿主元素设置样式。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  :host</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    background</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#f8f8f8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  :host</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">:hover</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">    background</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#ccc</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="document-importnode" tabindex="-1">document.importNode() <a class="header-anchor" href="#document-importnode" aria-label="Permalink to &quot;document.importNode()&quot;">​</a></h3><p>document.importNode方法用于克隆外部文档的DOM节点。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> iframe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementsByTagName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;iframe&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> oldNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iframe.contentWindow.document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;myNode&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> newNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">importNode</span><span style="color:#E1E4E8;">(oldNode, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(newNode);</span></span></code></pre></div><p>上面例子是将iframe窗口之中的节点oldNode，克隆进入当前文档。</p><p>注意，克隆节点之后，还必须用appendChild方法将其加入当前文档，否则不会显示。换个角度说，这意味着插入外部文档节点之前，必须用document.importNode方法先将这个节点准备好。</p><p>document.importNode方法接受两个参数，第一个参数是外部文档的DOM节点，第二个参数是一个布尔值，表示是否连同子节点一起克隆，默认为false。大多数情况下，必须显式地将第二个参数设为true。</p><h2 id="shadow-dom" tabindex="-1">Shadow DOM <a class="header-anchor" href="#shadow-dom" aria-label="Permalink to &quot;Shadow DOM&quot;">​</a></h2><p>所谓 Shadow DOM 指的是，浏览器将模板、样式表、属性、JavaScript 码等，封装成一个独立的 DOM 元素。外部的设置无法影响到其内部，而内部的设置也不会影响到外部，与浏览器处理原生网页元素（比如<code>&lt;video&gt;</code>元素）的方式很像。</p><p>Shadow DOM 最大的好处有两个，一是可以向用户隐藏细节，直接提供组件，二是可以封装内部样式表，不会影响到外部。</p><p>Custom Element 内部有一个 Shadow Root。它就是接入外部 DOM 的根元素。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// attachShadow() creates a shadow root.</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shadow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> div.</span><span style="color:#B392F0;">attachShadow</span><span style="color:#E1E4E8;">({ mode: </span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> inner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">inner.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">createTextNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hiding in the shadows&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// shadow root supports the normal appendChild method.</span></span>
<span class="line"><span style="color:#E1E4E8;">shadow.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(inner);</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// empty</span></span></code></pre></div><p>上面代码中，<code>&lt;div&gt;</code>包含<code>&lt;b&gt;</code>，但是 DOM 方法无法看到它，而且页面的样式也影响不到它。</p><p><code>mode: &#39;open&#39;</code>表示开发者工具里面，可以看到 Custom HTML 内部的 DOM，并与之互动。<code>mode: closed</code>将不允许 Custom Element 的使用者与内部代码互动。</p><p>Shadow root 内部通过指定<code>innerHTML</code>属性或使用<code>&lt;template&gt;</code>元素，指定 HTML 代码。</p><p>Shadow DOM 内部可以通过向根添加<code>&lt;style&gt;</code>（或<code>&lt;link&gt;</code>）来设置样式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">style.innerText </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;b { font-weight: bolder; color: red; }&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">shadowRoot.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(style);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> inner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">inner.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;I&#39;m bolder in the shadows&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">shadowRoot.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(inner);</span></span></code></pre></div><p>上面代码添加的样式，只会影响 Shadow DOM 内的元素。</p><p>Custom Element 的 CSS 样式内部，<code>:root</code>表示这个根元素。比如，Custom Element 默认是行内元素，下面代码可以改成块级元素。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">:host</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">block</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">:host</span><span style="color:#E1E4E8;">([</span><span style="color:#B392F0;">disabled</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>注意，外部样式会覆盖掉<code>:host</code>的设置，比如下面的样式会覆盖<code>:host</code>。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">inline-block</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>利用 CSS 的自定义属性，可以为 Custom Element 可以被覆盖的默认样式。下面是外部样式，<code>my-element</code>是 Custom Element。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  --background-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#ff0000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>然后，内部可以指定默认样式，用于用户没有指定颜色的情况。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">:host</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  --background-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#ffffff</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">#container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  background-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">var</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">--background-color</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>下面的例子是为 Shadow DOM 加上独立的模板。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;nameTag&quot;</span><span style="color:#E1E4E8;">&gt;张三&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;nameTagTemplate&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    .outer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">      border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">px</span><span style="color:#79B8FF;"> solid</span><span style="color:#79B8FF;"> brown</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;outer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;boilerplate&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Hi! My name is</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Bob</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码是一个<code>div</code>元素和模板。接下来，就是要把模板应用到<code>div</code>元素上。</p><h2 id="html-import" tabindex="-1">HTML Import <a class="header-anchor" href="#html-import" aria-label="Permalink to &quot;HTML Import&quot;">​</a></h2><h3 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h3><p>长久以来，网页可以加载外部的样式表、脚本、图片、多媒体，却无法方便地加载其他网页，iframe和ajax都只能提供部分的解决方案，且有很大的局限。HTML Import就是为了解决加载外部网页这个问题，而提出来的。</p><p>下面代码用于测试当前浏览器是否支持HTML Import。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> supportsImports</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#9ECBFF;"> &#39;import&#39;</span><span style="color:#F97583;"> in</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">supportsImports</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 支持</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 不支持</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>HTML Import用于将外部的HTML文档加载进当前文档。我们可以将组件的HTML、CSS、JavaScript封装在一个文件里，然后使用下面的代码插入需要使用该组件的网页。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dialog.html&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码在网页中插入一个对话框组件，该组建封装在<code>dialog.html</code>文件。注意，dialog.html文件中的样式和JavaScript脚本，都对所插入的整个网页有效。</p><p>假定A网页通过HTML Import加载了B网页，即B是一个组件，那么B网页的样式表和脚本，对A网页也有效（准确得说，只有style标签中的样式对A网页有效，link标签加载的样式表对A网页无效）。所以可以把多个样式表和脚本，都放在B网页中，都从那里加载。这对大型的框架，是很方便的加载方法。</p><p>如果B与A不在同一个域，那么A所在的域必须打开CORS。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- example.com必须打开CORS --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://example.com/elements.html&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>除了用link标签，也可以用JavaScript调用link元素，完成HTML Import。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> link </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">link.rel </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;import&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">link.href </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;file.html&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">link.</span><span style="color:#B392F0;">onload</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">link.</span><span style="color:#B392F0;">onerror</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(link);</span></span></code></pre></div><p>HTML Import加载成功时，会在link元素上触发load事件，加载失败时（比如404错误）会触发error事件，可以对这两个事件指定回调函数。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> async</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">  function</span><span style="color:#B392F0;"> handleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Loaded import: &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> e.target.href);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  function</span><span style="color:#B392F0;"> handleError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error loading import: &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> e.target.href);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;file.html&quot;</span></span>
<span class="line"><span style="color:#B392F0;">      onload</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">handleLoad</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">event</span><span style="color:#9ECBFF;">)&quot;</span><span style="color:#B392F0;"> onerror</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">handleError</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">event</span><span style="color:#9ECBFF;">)&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，handleLoad和handleError函数的定义，必须在link元素的前面。因为浏览器元素遇到link元素时，立刻解析并加载外部网页（同步操作），如果这时没有对这两个函数定义，就会报错。</p><p>HTML Import是同步加载，会阻塞当前网页的渲染，这主要是为了样式表的考虑，因为外部网页的样式表对当前网页也有效。如果想避免这一点，可以为link元素加上async属性。当然，这也意味着，如果外部网页定义了组件，就不能立即使用了，必须等HTML Import完成，才能使用。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/path/to/import_that_takes_5secs.html&quot;</span><span style="color:#B392F0;"> async</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>但是，HTML Import不会阻塞当前网页的解析和脚本执行（即阻塞渲染）。这意味着在加载的同时，主页面的脚本会继续执行。</p><p>最后，HTML Import支持多重加载，即被加载的网页同时又加载其他网页。如果这些网页都重复加载同一个外部脚本，浏览器只会抓取并执行一次该脚本。比如，A网页加载了B网页，它们各自都需要加载jQuery，浏览器只会加载一次jQuery。</p><h3 id="脚本的执行" tabindex="-1">脚本的执行 <a class="header-anchor" href="#脚本的执行" aria-label="Permalink to &quot;脚本的执行&quot;">​</a></h3><p>外部网页的内容，并不会自动显示在当前网页中，它只是储存在浏览器中，等到被调用的时候才加载进入当前网页。为了加载网页网页，必须用DOM操作获取加载的内容。具体来说，就是使用link元素的import属性，来获取加载的内容。这一点与iframe完全不同。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link[rel=&quot;import&quot;]&#39;</span><span style="color:#E1E4E8;">).import;</span></span></code></pre></div><p>发生以下情况时，link.import属性为null。</p><ul><li>浏览器不支持HTML Import</li><li>link元素没有声明<code>rel=&quot;import&quot;</code></li><li>link元素没有被加入DOM</li><li>link元素已经从DOM中移除</li><li>对方域名没有打开CORS</li></ul><p>下面代码用于从加载的外部网页选取id为template的元素，然后将其克隆后加入当前网页的DOM。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> linkElement.import.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#template&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(el.</span><span style="color:#B392F0;">cloneNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span></code></pre></div><p>当前网页可以获取外部网页，反过来也一样，外部网页中的脚本，不仅可以获取本身的DOM，还可以获取link元素所在的当前网页的DOM。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以下代码位于被加载（import）的外部网页</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// importDoc指向被加载的DOM</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> importDoc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.currentScript.ownerDocument;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// mainDoc指向主文档的DOM</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mainDoc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将子页面的样式表添加主文档</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> styles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importDoc.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link[rel=&quot;stylesheet&quot;]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mainDoc.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(styles.</span><span style="color:#B392F0;">cloneNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span></code></pre></div><p>上面代码将所加载的外部网页的样式表，添加进当前网页。</p><p>被加载的外部网页的脚本是直接在当前网页的上下文执行，因为它的<code>window.document</code>指的是当前网页的document，而且它定义的函数可以被当前网页的脚本直接引用。</p><h3 id="web-component的封装" tabindex="-1">Web Component的封装 <a class="header-anchor" href="#web-component的封装" aria-label="Permalink to &quot;Web Component的封装&quot;">​</a></h3><p>对于Web Component来说，HTML Import的一个重要应用是在所加载的网页中，自动登记Custom Element。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  // 定义并登记&lt;say-hi&gt;</span></span>
<span class="line"><span style="color:#F97583;">  var</span><span style="color:#E1E4E8;"> proto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HTMLElement</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  proto.</span><span style="color:#B392F0;">createdCallback</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;Hello, &lt;b&gt;&#39;</span><span style="color:#F97583;"> +</span></span>
<span class="line"><span style="color:#E1E4E8;">                     (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;?&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;&lt;/b&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">registerElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;say-hi&#39;</span><span style="color:#E1E4E8;">, {prototype: proto});</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;t&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    ::content</span><span style="color:#F97583;"> &gt;</span><span style="color:#85E89D;"> *</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">      color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;I&#39;m a shadow-element using Shadow DOM!&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">content</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">content</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> importDoc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.currentScript.ownerDocument; </span><span style="color:#6A737D;">//指向被加载的网页</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 定义并登记&lt;shadow-element&gt;</span></span>
<span class="line"><span style="color:#F97583;">    var</span><span style="color:#E1E4E8;"> proto2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HTMLElement</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    proto2.</span><span style="color:#B392F0;">createdCallback</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importDoc.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#t&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> clone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">importNode</span><span style="color:#E1E4E8;">(template.content, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">      var</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createShadowRoot</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      root.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(clone);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    document.</span><span style="color:#B392F0;">registerElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;shadow-element&#39;</span><span style="color:#E1E4E8;">, {prototype: proto2});</span></span>
<span class="line"><span style="color:#E1E4E8;">  })();</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码定义并登记了两个元素：&lt;say-hi&gt;和&lt;shadow-element&gt;。在主页面使用这两个元素，非常简单。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;elements.html&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">say-hi</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Eric&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">say-hi</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">shadow-element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;( I&#39;m in the light dom )&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">shadow-element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>不难想到，这意味着HTML Import使得Web Component变得可分享了，其他人只要拷贝<code>elements.html</code>，就可以在自己的页面中使用了。</p><h2 id="polymer-js" tabindex="-1">Polymer.js <a class="header-anchor" href="#polymer-js" aria-label="Permalink to &quot;Polymer.js&quot;">​</a></h2><p>Web Components是非常新的技术，为了让老式浏览器也能使用，Google推出了一个函数库<a href="http://www.polymer-project.org/" target="_blank" rel="noreferrer">Polymer.js</a>。这个库不仅可以帮助开发者，定义自己的网页元素，还提供许多预先制作好的组件，可以直接使用。</p><h3 id="直接使用的组件" tabindex="-1">直接使用的组件 <a class="header-anchor" href="#直接使用的组件" aria-label="Permalink to &quot;直接使用的组件&quot;">​</a></h3><p>Polymer.js提供的组件，可以直接插入网页，比如下面的google-map。。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;components/platform/platform.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;google-map.html&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">google-map</span><span style="color:#B392F0;"> lat</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;37.790&quot;</span><span style="color:#B392F0;"> long</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;-122.390&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">google-map</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>再比如，在网页中插入一个时钟，可以直接使用下面的标签。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">polymer-ui-clock</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">polymer-ui-clock</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>自定义标签与其他标签的用法完全相同，也可以使用CSS指定它的样式。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#85E89D;">polymer-ui-clock</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">320</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">320</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">inline-block</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  background</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../assets/glass.png&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">no-repeat</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  background-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">cover</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">px</span><span style="color:#79B8FF;"> solid</span><span style="color:#79B8FF;"> rgba</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>如果使用bower安装，至少需要安装platform和core components这两个核心部分。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#B392F0;">bower</span><span style="color:#9ECBFF;"> install</span><span style="color:#79B8FF;"> --save</span><span style="color:#9ECBFF;"> Polymer/platform</span></span>
<span class="line"><span style="color:#B392F0;">bower</span><span style="color:#9ECBFF;"> install</span><span style="color:#79B8FF;"> --save</span><span style="color:#9ECBFF;"> Polymer/polymer</span></span></code></pre></div><p>你还可以安装所有预先定义的界面组件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#B392F0;">bower</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> Polymer/core-elements</span></span>
<span class="line"><span style="color:#B392F0;">bower</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> Polymer/polymer-ui-elements</span></span></code></pre></div><p>还可以只安装单个组件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#B392F0;">bower</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> Polymer/polymer-ui-accordion</span></span></code></pre></div><p>这时，组件根目录下的bower.json，会指明该组件的依赖的模块，这些模块会被自动安装。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;polymer-ui-accordion&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;private&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;polymer&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Polymer/polymer#0.2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;polymer-selector&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Polymer/polymer-selector#0.2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;polymer-ui-collapsible&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Polymer/polymer-ui-collapsible#0.2.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.2.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="自定义组件" tabindex="-1">自定义组件 <a class="header-anchor" href="#自定义组件" aria-label="Permalink to &quot;自定义组件&quot;">​</a></h3><p>下面是一个最简单的自定义组件的例子。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../bower_components/polymer/polymer.html&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">polymer-element</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;lorem-element&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Lorem ipsum&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">polymer-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码定义了lorem-element组件。它分成三个部分。</p><p><strong>（1）import命令</strong></p><p>import命令表示载入核心模块</p><p><strong>（2）polymer-element标签</strong></p><p>polymer-element标签定义了组件的名称（注意，组件名称中必须包含连字符）。它还可以使用extends属性，表示组件基于某种网页元素。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">polymer-element</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;w3c-disclosure&quot;</span><span style="color:#B392F0;"> extends</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>（3）template标签</strong></p><p>template标签定义了网页元素的模板。</p><h3 id="组件的使用方法" tabindex="-1">组件的使用方法 <a class="header-anchor" href="#组件的使用方法" aria-label="Permalink to &quot;组件的使用方法&quot;">​</a></h3><p>在调用组件的网页中，首先加载polymer.js库和组件文件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;components/platform/platform.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;w3c-disclosure.html&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>然后，分成两种情况。如果组件不基于任何现有的HTML网页元素（即定义的时候没有使用extends属性），则可以直接使用组件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">lorem-element</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">lorem-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这时网页上就会显示一行字“Lorem ipsum”。</p><p>如果组件是基于（extends）现有的网页元素，则必须在该种元素上使用is属性指定组件。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>&lt;button is=&quot;w3c-disclosure&quot;&gt;Expand section 1&lt;/button&gt;</span></span></code></pre></div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://hacks.mozilla.org/2018/11/the-power-of-web-components/" target="_blank" rel="noreferrer">The Power of Web Components</a>, Potch</li><li>Todd Motto, <a href="http://toddmotto.com/web-components-concepts-shadow-dom-imports-templates-custom-elements/" target="_blank" rel="noreferrer">Web Components and concepts, ShadowDOM, imports, templates, custom elements</a></li><li>Dominic Cooney, <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/" target="_blank" rel="noreferrer">Shadow DOM 101</a></li><li>Eric Bidelman, <a href="http://www.html5rocks.com/en/tutorials/webcomponents/template/" target="_blank" rel="noreferrer">HTML&#39;s New Template Tag</a></li><li>Rey Bango, <a href="http://code.tutsplus.com/tutorials/using-polymer-to-create-web-components--cms-20475" target="_blank" rel="noreferrer">Using Polymer to Create Web Components</a></li><li>Cédric Trévisan, Building an Accessible Disclosure Button – using Web Components](<a href="http://blog.paciellogroup.com/2014/06/accessible-disclosure-button-using-web-components/" target="_blank" rel="noreferrer">http://blog.paciellogroup.com/2014/06/accessible-disclosure-button-using-web-components/</a>)</li><li>Eric Bidelman, <a href="http://www.html5rocks.com/en/tutorials/webcomponents/customelements/" target="_blank" rel="noreferrer">Custom Elements: defining new elements in HTML</a></li><li>Eric Bidelman, <a href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/" target="_blank" rel="noreferrer">HTML Imports</a></li><li>TJ VanToll, <a href="http://developer.telerik.com/featured/web-components-ready-production/" target="_blank" rel="noreferrer">Why Web Components Are Ready For Production</a></li><li>Chris Bateman, <a href="http://cbateman.com/blog/a-no-nonsense-guide-to-web-components-part-1-the-specs/" target="_blank" rel="noreferrer">A No-Nonsense Guide to Web Components, Part 1: The Specs</a></li><li><a href="https://blog.usejournal.com/web-components-will-replace-your-frontend-framework-3b17a580831c" target="_blank" rel="noreferrer">Web Components will replace your frontend framework</a>, Danny Moerkerke</li><li><a href="https://developers.google.com/web/fundamentals/web-components/customelements#extend" target="_blank" rel="noreferrer">Custom Elements v1: Reusable Web Components</a>, Eric Bidelman</li></ul>`,196)])])}const F=n(o,[["render",e]]);export{d as __pageData,F as default};
