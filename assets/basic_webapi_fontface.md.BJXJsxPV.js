import{_ as e,c as a,b as s,o as c}from"./chunks/framework.E7rrtXIC.js";const y=JSON.parse('{"title":"FontFace API","description":"","frontmatter":{},"headers":[],"relativePath":"basic/webapi/fontface.md","filePath":"basic/webapi/fontface.md"}'),n={name:"basic/webapi/fontface.md"};function l(t,o,p,d,i,r){return c(),a("div",null,[...o[0]||(o[0]=[s(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/fontface.md for this page in Markdown format</div><h1 id="fontface-api" tabindex="-1">FontFace API <a class="header-anchor" href="#fontface-api" aria-label="Permalink to &quot;FontFace API&quot;">​</a></h1><p>FontFace API 用来控制字体加载。</p><p>这个 API 提供一个构造函数<code>FontFace()</code>，返回一个字体对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> FontFace</span><span style="color:#E1E4E8;">(family, source, descriptors)</span></span></code></pre></div><p><code>FontFace()</code>构造函数接受三个参数。</p><ul><li><code>family</code>：字符串，表示字体名，写法与 CSS 的<code>@font-face</code>的<code>font-family</code>属性相同。</li><li><code>source</code>：字体文件的 URL（必须包括 CSS 的<code>url()</code>方法），或者是一个字体的 ArrayBuffer 对象。</li><li><code>descriptors</code>：对象，用来定制字体文件。该参数可选。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fontFace </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FontFace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;Roboto&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;url(https://fonts.example.com/roboto.woff2)&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fontFace.family </span><span style="color:#6A737D;">// &quot;Roboto&quot;</span></span></code></pre></div><p><code>FontFace()</code>返回的是一个字体对象，这个对象包含字体信息。注意，这时字体文件还没有开始加载。</p><p>字体对象包含以下属性。</p><ul><li><code>FontFace.family</code>：字符串，表示字体的名字，等同于 CSS 的<code>font-family</code>属性。</li><li><code>FontFace.display</code>：字符串，指定字体加载期间如何展示，等同于 CSS 的<code>font-display</code>属性。它有五个可能的值：<code>auto</code>（由浏览器决定）、<code>block</code>（字体加载期间，前3秒会显示不出内容，然后只要还没完成加载，就一直显示后备字体）、<code>fallback</code>（前100毫秒显示不出内容，后3秒显示后备字体，然后只要字体还没完成加载，就一直显示后备字体）、<code>optional</code>（前100毫秒显示不出内容，然后只要字体还没有完成加载，就一直显示后备字体），<code>swap</code>（只要字体没有完成加载，就一直显示后备字体）。</li><li><code>FontFace.style</code>：字符串，等同于 CSS 的<code>font-style</code>属性。</li><li><code>FontFace.weight</code>：字符串，等同于 CSS 的<code>font-weight</code>属性。</li><li><code>FontFace.stretch</code>：字符串，等同于 CSS 的<code>font-stretch</code>属性。</li><li><code>FontFace.unicodeRange</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li><li><code>FontFace.variant</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li><li><code>FontFace.featureSettings</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li><li><code>FontFace.status</code>：字符串，表示字体的加载状态，有四个可能的值：<code>unloaded</code>、<code>loading</code>、<code>loaded</code>、<code>error</code>。该属性只读。</li><li><code>FontFace.loaded</code>：返回一个 Promise 对象，字体加载成功或失败，会导致该 Promise 状态改变。该属性只读。</li></ul><p>字体对象的方法，只有一个<code>FontFace.load()</code>，该方法会真正开始加载字体。它返回一个 Promise 对象，状态由字体加载的结果决定。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FontFace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;url(x)&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">  // 网页可以开始使用该字体</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div>`,13)])])}const f=e(n,[["render",l]]);export{y as __pageData,f as default};
