import{_ as n,c as a,o as e,b as l}from"./chunks/framework.3z4p0y-m.js";const F=JSON.parse('{"title":"Intl segmenter API","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[{"level":3,"title":"Intl.Segmenter.supportedLocalesOf()","slug":"intl-segmenter-supportedlocalesof","link":"#intl-segmenter-supportedlocalesof","children":[]}]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"resolvedOptions()","slug":"resolvedoptions","link":"#resolvedoptions","children":[]},{"level":3,"title":"segment()","slug":"segment","link":"#segment","children":[]}]}],"relativePath":"basic/webapi/intl-segmenter.md","filePath":"basic/webapi/intl-segmenter.md"}'),o={name:"basic/webapi/intl-segmenter.md"};function p(t,s,c,r,E,y){return e(),a("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/intl-segmenter.md for this page in Markdown format</div><h1 id="intl-segmenter-api" tabindex="-1">Intl segmenter API <a class="header-anchor" href="#intl-segmenter-api" aria-label="Permalink to &quot;Intl segmenter API&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Intl.Segmenter 是浏览器内置的用于文本分词的 API。</p><p>使用时，先用<code>Intl.Segmenter()</code>新建一个分词器对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenter</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;en&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><code>Intl.Segmenter()</code>接受两个参数，第一个是所要分词的语言简称（上例是<code>en</code>），第二个参数是一个配置对象，有以下两个属性。</p><ul><li><code>localeMatcher</code>：指定分词算法，有两个可能的值，一个是<code>lookup</code>，表示采用特定的算法（BCP 47），另一个是<code>best fit</code>（默认值），表示采用操作系统或浏览器现有的尽可能适用的算法。</li><li><code>granularity</code>：表示分词的颗粒度，有三个可能的值：grapheme（字符，这是默认值），word（词语），sentence（句子）。</li></ul><p>拿到分词器对象以后，就可以进行分词了。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenter</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;en&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segments</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenter.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;This has four words!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(segments).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">segment</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> segment.segment);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;This&#39;, &#39; &#39;, &#39;has&#39;, &#39; &#39;, &#39;four&#39;, &#39; &#39;, &#39;words&#39;, &#39;!&#39;]</span></span></code></pre></div><p>上面示例中，变量<code>segmenter</code>是分词器对象，可以对英语进行分词，颗粒度是词语。所以，“This has four words!”被分成了8个部分，包括4个词语、3个空格和1个标点符号。</p><p>分词器对象的<code>segment()</code>方法是实际的分词方法，它的参数是需要分词的文本，返回值是一个具有迭代器接口的分词结果对象。<code>Array.from()</code>将这个分词结果对象转成数组，也可以采用<code>[...segments]</code>的写法。</p><p>下面的例子是过滤掉非词语字符。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segments</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenter.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;This has four words!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(segments)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">segment</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> segment.isWordLike)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">segment</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> segment.segment);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;This&#39;, &#39;has&#39;, &#39;four&#39;, &#39;words&#39;]</span></span></code></pre></div><p>上面示例中，<code>Array.from()</code>将分词结果对象转成一个数组，变量<code>segment</code>是数组的每个成员，它也是一个对象。该对象的<code>isWordLike</code>属性是一个布尔值，表示当前值是否为一个真正的词，而该对象的<code>segment</code>属性（上例的<code>segment.segment</code>）则是真正的分词结果。</p><p>Intl Segmenter 支持各种语言，下面是日语分词的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenter</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ja&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segments</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenter.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;これは日本語のテキストです&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(segments).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">segment</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> segment.segment);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;これ&#39;, &#39;は&#39;, &#39;日本語&#39;, &#39;の&#39;, &#39;テキスト&#39;, &#39;です&#39;]</span></span></code></pre></div><p>下面是法语的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenterFr</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> string1</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Que ma joie demeure&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> iterator1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenterFr.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(string1)[Symbol.iterator]();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">iterator1.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value.segment </span><span style="color:#6A737D;">// &#39;Que&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator1.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value.segment </span><span style="color:#6A737D;">// &#39; &#39;</span></span></code></pre></div><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h3 id="intl-segmenter-supportedlocalesof" tabindex="-1">Intl.Segmenter.supportedLocalesOf() <a class="header-anchor" href="#intl-segmenter-supportedlocalesof" aria-label="Permalink to &quot;Intl.Segmenter.supportedLocalesOf()&quot;">​</a></h3><p><code>Intl.Segmenter.supportedLocalesOf()</code>返回一个数组，用来检测当前环境是否支持指定语言的分词。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> locales1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;ban&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;id-u-co-pinyin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;de-ID&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> options1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { localeMatcher: </span><span style="color:#9ECBFF;">&#39;lookup&#39;</span><span style="color:#E1E4E8;">, granularity: </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Intl.Segmenter.</span><span style="color:#B392F0;">supportedLocalesOf</span><span style="color:#E1E4E8;">(locales1, options1)</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;id-u-co-pinyin&quot;, &quot;de-ID&quot;]</span></span></code></pre></div><p>它接受两个参数，第一个参数是一个数组，数组成员是需要检测的语言简称；第二个参数是配置对象，跟构造方法的第二个参数是一致的，可以省略。</p><p>上面示例中，需要检测的三种语言分别是巴厘岛语（ban）、印度尼西亚语（id-u-co-pinyin）、德语（de-ID）。结果显示只支持前两者，不支持巴厘岛语。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="resolvedoptions" tabindex="-1">resolvedOptions() <a class="header-anchor" href="#resolvedoptions" aria-label="Permalink to &quot;resolvedOptions()&quot;">​</a></h3><p>实例对象的<code>resolvedOptions()</code>方法，用于获取构造该实例时的参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenter1</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr-FR&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> options1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenter1.</span><span style="color:#B392F0;">resolvedOptions</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">options1.locale </span><span style="color:#6A737D;">// &quot;fr-FR&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">options1.granularity </span><span style="color:#6A737D;">// &quot;grapheme&quot;</span></span></code></pre></div><p>上面示例中，<code>resolveOptions()</code>方法返回了一个对象，该对象的<code>locale</code>属性对应构造方法的第一个参数，<code>granularity</code>属性对应构造方法第二个参数对象的颗粒度属性。</p><h3 id="segment" tabindex="-1">segment() <a class="header-anchor" href="#segment" aria-label="Permalink to &quot;segment()&quot;">​</a></h3><p>实例对象的<code>segment()</code>方法进行实际的分词。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenterFr</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> string1</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Que ma joie demeure&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segments</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenterFr.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(string1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// {segment: &#39;ma&#39;, index: 4, input: &#39;Que ma joie demeure&#39;, isWordLike: true}</span></span></code></pre></div><p><code>segment()</code>方法的返回结果是一个具有迭代器接口的分词结果对象，有三种方法进行处理。</p><p>（1）使用<code>Array.from()</code>或扩展运算符（<code>...</code>）将分词结果对象转成数组。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenterFr</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> string1</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Que ma joie demeure&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> iterator1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenterFr.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(string1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(iterator1).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">segment</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (segment.segment.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> &gt;</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(segment.segment);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// demeure</span></span></code></pre></div><p>上面示例中，<code>segmenterFr.segment()</code>返回一个针对<code>string1</code>的分词结果对象，该对象具有迭代器接口。<code>Array.from()</code>将其转为数组，数组的每个成员是一个分词颗粒对象，该对象的<code>segment</code>属性就是分词结果。分词颗粒对象的介绍，详见后文。</p><p>（2）使用<code>for...of</code>循环，遍历分词结果对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenterFr</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> string1</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Que ma joie demeure&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> iterator1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenterFr.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(string1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segment</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> iterator1) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (segment.segment.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> &gt;</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(segment.segment);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// demeure</span></span></code></pre></div><p>上面示例中，<code>for...of</code>默认调用分词结果对象的迭代器接口，获取每一轮的分词颗粒对象。</p><p>由于迭代器接口是在<code>Symbol.iterator</code>属性上面，所以实际执行的代码如下。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenterFr</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> string1</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Que ma joie demeure&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> iterator1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenterFr.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(string1)[Symbol.iterator]();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segment</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> iterator1) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (segment.segment.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> &gt;</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(segment.segment);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;demeure&quot;</span></span></code></pre></div><p><code>for...of</code>循环每一轮得到的是一个分词颗粒对象，该对象的<code>segment</code>属性就是当前的分词结果，详见下文。</p><p>（3）使用<code>containing()</code>方法获取某个位置的分词颗粒对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenterFr</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&#39;word&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> string1</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Que ma joie demeure&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segments</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenterFr.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(string1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// {segment: &#39;ma&#39;, index: 4, input: &#39;Que ma joie demeure&#39;, isWordLike: true}</span></span></code></pre></div><p><code>containing()</code>方法的参数是一个整数，表示原始字符串的指定位置（从0开始计算）。如果省略该参数，则默认为0。</p><p><code>containing()</code>的返回值是该位置的分词颗粒对象，如果参数位置超出原始字符串，则返回<code>undefined</code>。分词颗粒对象有以下属性。</p><ul><li>segment：指定位置对应的分词结果。</li><li>index：本次分词在原始字符串的开始位置（从0开始）。</li><li>input：进行分词的原始字符串。</li><li>isWordLike：如果分词颗粒度为<code>word</code>，该属性返回一个布尔值，表示当前值是否一个真正的词。如果分词颗粒度不为<code>word</code>，则返回<code>undefined</code>。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> input</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;Allons-y!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segmenter</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> Intl.</span><span style="color:#B392F0;">Segmenter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fr&quot;</span><span style="color:#E1E4E8;">, { granularity: </span><span style="color:#9ECBFF;">&quot;word&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> segments</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> segmenter.</span><span style="color:#B392F0;">segment</span><span style="color:#E1E4E8;">(input);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// { index: 0, segment: &quot;Allons&quot;, isWordLike: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// { index: 0, segment: &quot;Allons&quot;, isWordLike: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// { index: 6, segment: &quot;-&quot;, isWordLike: false }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(current.index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> current.segment.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// { index: 7, segment: &quot;y&quot;, isWordLike: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(current.index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> current.segment.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// { index: 8, segment: &quot;!&quot;, isWordLike: false }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segments.</span><span style="color:#B392F0;">containing</span><span style="color:#E1E4E8;">(current.index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> current.segment.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// undefined</span></span></code></pre></div><p>上面示例中，分词结果中除了空格和标点符号，其他情况下，<code>isWordLike</code>都返回<code>false</code>。</p>`,50)])])}const d=n(o,[["render",p]]);export{F as __pageData,d as default};
