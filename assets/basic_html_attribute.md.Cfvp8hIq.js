import{_ as a,c as l,o as e,b as o}from"./chunks/framework.3z4p0y-m.js";const y=JSON.parse('{"title":"网页元素的属性","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"全局属性","slug":"全局属性","link":"#全局属性","children":[{"level":3,"title":"id","slug":"id","link":"#id","children":[]},{"level":3,"title":"class","slug":"class","link":"#class","children":[]},{"level":3,"title":"title","slug":"title","link":"#title","children":[]},{"level":3,"title":"tabindex","slug":"tabindex","link":"#tabindex","children":[]},{"level":3,"title":"accesskey","slug":"accesskey","link":"#accesskey","children":[]},{"level":3,"title":"style","slug":"style","link":"#style","children":[]},{"level":3,"title":"hidden","slug":"hidden","link":"#hidden","children":[]},{"level":3,"title":"lang，dir","slug":"lang-dir","link":"#lang-dir","children":[]},{"level":3,"title":"translate","slug":"translate","link":"#translate","children":[]},{"level":3,"title":"contenteditable","slug":"contenteditable","link":"#contenteditable","children":[]},{"level":3,"title":"spellcheck","slug":"spellcheck","link":"#spellcheck","children":[]},{"level":3,"title":"data-属性","slug":"data-属性","link":"#data-属性","children":[]},{"level":3,"title":"事件处理属性","slug":"事件处理属性","link":"#事件处理属性","children":[]}]}],"relativePath":"basic/html/attribute.md","filePath":"basic/html/attribute.md"}'),n={name:"basic/html/attribute.md"};function t(p,s,c,d,r,i){return e(),l("div",null,[...s[0]||(s[0]=[o(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/html/attribute.md for this page in Markdown format</div><h1 id="网页元素的属性" tabindex="-1">网页元素的属性 <a class="header-anchor" href="#网页元素的属性" aria-label="Permalink to &quot;网页元素的属性&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>网页元素的属性（attribute）可以定制元素的行为，不同的属性会导致元素有不同的行为。元素属性的写法是 HTML 标签内部的“键值对”。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>&lt;html&gt;</code>标签内部的键值对<code>lang=&quot;en&quot;</code>，就称为<code>html</code>元素的属性。属性名为<code>lang</code>，属性值为<code>en</code>。</p><p>属性名与标签名一样，不区分大小写，<code>lang</code>和<code>LANG</code>是同一个属性。</p><p>属性名与属性值之间，通过等号<code>=</code>连接。属性值可以放在单引号或双引号之中，建议统一使用双引号。某些属性值可以不使用引号，但是建议不要这样写。</p><p>有些属性是布尔属性，即属性值是一个布尔值，只有“打开”和“关闭”两种情况。这时属性值可以省略，只要添加了属性名，就表示打开该属性。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#B392F0;"> required</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>required</code>就是<code>&lt;input&gt;</code>标签的布尔属性。如果加上这个属性，就表示打开，没有就是关闭。</p><h2 id="全局属性" tabindex="-1">全局属性 <a class="header-anchor" href="#全局属性" aria-label="Permalink to &quot;全局属性&quot;">​</a></h2><p>全局属性（global attributes）是所有元素都可以使用的属性。也就是说，你可以把下面的属性，加在任意一个网页元素上面，不过有些属性对某些元素可能不产生意义。</p><p>下面是一些常见的全局属性。</p><h3 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h3><p><code>id</code>属性是元素在网页内的唯一标识符。比如，网页可能包含多个<code>&lt;p&gt;</code>标签，<code>id</code>属性可以指定每个<code>&lt;p&gt;</code>标签的唯一标识符。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;p1&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;p2&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;p3&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，三个<code>&lt;p&gt;</code>标签具有不同的<code>id</code>属性，因此可以区分。</p><p><code>id</code>属性的值必须是全局唯一的，同一个页面不能有两个相同的<code>id</code>属性。另外，<code>id</code>属性的值不得包含空格。</p><p><code>id</code>属性的值还可以在最前面加上<code>#</code>，放到 URL 中作为锚点，定位到该元素在网页内部的位置。比如，用户访问网址<code>https://foo.com/index.html#bar</code>的时候，浏览器会自动将页面滚动到<code>bar</code>的位置，让用户第一眼就看到这部分内容。</p><h3 id="class" tabindex="-1">class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;class&quot;">​</a></h3><p><code>class</code>属性用来对网页元素进行分类。如果不同元素的<code>class</code>属性值相同，就表示它们是一类的。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;para&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;para&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，第一个<code>&lt;p&gt;</code>和第三个<code>&lt;p&gt;</code>是一类，因为它们的<code>class</code>属性相同。</p><p>元素可以同时具有多个 class，它们之间使用空格分隔。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;p1 p2 p3&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面的<code>p</code>元素同时具有<code>p1</code>、<code>p2</code>、<code>p3</code>三个 class。</p><h3 id="title" tabindex="-1">title <a class="header-anchor" href="#title" aria-label="Permalink to &quot;title&quot;">​</a></h3><p><code>title</code>属性用来为元素添加附加说明。大多数浏览器中，鼠标悬浮在元素上面时，会将<code>title</code>属性值作为浮动提示，显示出来。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;版权说明&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;本站内容使用创意共享许可证，可以自由使用。&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>title</code>属性解释了这一块内容的目的。鼠标悬停在上面时，浏览器会显示一个浮动提示。一旦鼠标移开，提示就会消失。</p><h3 id="tabindex" tabindex="-1">tabindex <a class="header-anchor" href="#tabindex" aria-label="Permalink to &quot;tabindex&quot;">​</a></h3><p>网页通常使用鼠标操作，但是某些情况下，用户可能希望使用键盘，或者只有键盘可以用。因此，浏览器允许使用 Tab 键，遍历网页元素。也就是说，只要不停按下 Tab 键，网页的焦点就会从一个元素转移到另一个元素，选定焦点元素以后，就可以进行下一步操作，比如按下回车键访问某个链接，或者直接在某个输入框输入文字。</p><p>这里就有一个问题，按下 Tab 键的时候，浏览器怎么知道跳到哪一个元素。HTML 提供了<code>tabindex</code>属性，解决这个问题。它的名字的含义，就是 Tab 的顺序（index）。</p><p><code>tabindex</code>属性的值是一个整数，表示用户按下 Tab 键的时候，网页焦点转移的顺序。不同的属性值有不同的含义。</p><ul><li>负整数：该元素可以获得焦点（比如使用 JavaScript 的<code>focus()</code>方法），但不参与 Tab 键对网页元素的遍历。这个值通常是<code>-1</code>。</li><li><code>0</code>：该元素参与 Tab 键的遍历，顺序由浏览器指定，通常是按照其在网页里面出现的位置。</li><li>正整数：网页元素按照从小到大的顺序（1、2、3、……），参与 Tab 键的遍历。如果多个元素的<code>tabindex</code>属性相同，则按照在网页源码里面出现的顺序遍历。</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> tabindex</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">&gt;这段文字可以获得焦点。&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>&lt;p&gt;</code>标签的<code>tabindex</code>为<code>0</code>，意味着该元素可以获得焦点，并且也可以被 Tab 键遍历，顺序由其在源码里面的位置决定。</p><p>一般来说，<code>tabindex</code>属性最好都设成<code>0</code>，按照自然顺序进行遍历，这样比较符合用户的预期，除非网页有特殊布局。如果网页所有元素都没有设置<code>tabindex</code>，那么只有那些默认可以遍历的元素（比如链接、输入框等）才能参与 Tab 键的遍历，顺序由其在源码的位置决定。因此实际上，只有那些无法获得焦点的元素（比如<code>&lt;span&gt;</code>、<code>&lt;div&gt;</code>）需要参与遍历，才有必要设置<code>tabindex</code>属性。</p><h3 id="accesskey" tabindex="-1">accesskey <a class="header-anchor" href="#accesskey" aria-label="Permalink to &quot;accesskey&quot;">​</a></h3><p><code>accesskey</code>属性指定网页元素获得焦点的快捷键，该属性的值必须是单个的可打印字符。只要按下快捷键，该元素就会得到焦点。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> accesskey</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;s&quot;</span><span style="color:#E1E4E8;">&gt;提交&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>&lt;button&gt;</code>的快捷键是<code>s</code>，按下快捷键，该元素就得到了焦点。</p><p><code>accesskey</code>属性的字符键，必须配合功能键，一起按下才会生效。也就是说，快捷键是“功能键 + 字符键”的组合。不同的浏览器与不同的操作系统，功能键都不一样。比如，Chrome 浏览器在 Windows 系统和 Linux 系统的快捷键是<code>Alt + 字符键</code>，在 Mac 系统的快捷键是<code>Ctrl + Alt + 字符键</code>。</p><p>注意，<code>accesskey</code>如果跟操作系统或浏览器级别的快捷键有冲突，这时不会生效。</p><h3 id="style" tabindex="-1">style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;style&quot;">​</a></h3><p><code>style</code>属性用来指定当前元素的 CSS 样式。具体的设置，请看 CSS 教程。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;color: red;&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码指定文字颜色为红色。</p><h3 id="hidden" tabindex="-1">hidden <a class="header-anchor" href="#hidden" aria-label="Permalink to &quot;hidden&quot;">​</a></h3><p><code>hidden</code>是一个布尔属性，表示当前的网页元素不再跟页面相关，因此浏览器不会渲染这个元素，所以就不会在网页中看到它。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> hidden</span><span style="color:#E1E4E8;">&gt;本句不会显示在页面上。&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，这个<code>p</code>元素不会出现在网页上。</p><p>注意，CSS 的可见性设置，高于<code>hidden</code>属性。如果 CSS 设为该元素可见，<code>hidden</code>属性将无效。</p><h3 id="lang-dir" tabindex="-1">lang，dir <a class="header-anchor" href="#lang-dir" aria-label="Permalink to &quot;lang，dir&quot;">​</a></h3><p><code>lang</code>属性指定网页元素使用的语言。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;zh&quot;</span><span style="color:#E1E4E8;">&gt;你好&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，第一个<code>&lt;p&gt;</code>的<code>lang</code>属性，表示使用英语，第二个<code>&lt;p&gt;</code>的<code>lang</code>属性，表示使用中文。</p><p><code>lang</code>属性的值，必须符合 <a href="https://www.ietf.org/rfc/bcp/bcp47.txt" target="_blank" rel="noreferrer">BCP47</a> 的标准。下面是一些常见的语言代码。</p><ul><li>zh：中文</li><li>zh-Hans：简体中文</li><li>zh-Hant：繁体中文</li><li>en：英语</li><li>en-US：美国英语</li><li>en-GB：英国英语</li><li>es：西班牙语</li><li>fr：法语</li></ul><p><code>dir</code>属性表示文字的阅读方向，有三个可能的值。</p><ul><li><code>ltr</code>：从左到右阅读，比如英语。</li><li><code>rtl</code>：从右到左阅读，阿拉伯语、波斯语、希伯来语都属于这一类。</li><li><code>auto</code>：浏览器根据内容的解析结果，自行决定。</li></ul><h3 id="translate" tabindex="-1">translate <a class="header-anchor" href="#translate" aria-label="Permalink to &quot;translate&quot;">​</a></h3><p><code>translate</code>属性只用于文本元素，用来指示翻译软件，不翻译该文本。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> translate</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;no&quot;</span><span style="color:#E1E4E8;">&gt;Wien&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  named world&#39;s most liveable city (again)!</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面示例中，<code>translate=&quot;no&quot;</code>用来告诉翻译软件，不要翻译<code>&lt;span&gt;</code>元素内的文本。</p><p>如果<code>translate</code>设为<code>yes</code>，就告诉翻译软件应该翻译该文本。</p><h3 id="contenteditable" tabindex="-1">contenteditable <a class="header-anchor" href="#contenteditable" aria-label="Permalink to &quot;contenteditable&quot;">​</a></h3><p>HTML 网页的内容默认是用户不能编辑，<code>contenteditable</code>属性允许用户修改内容。它有两个可能的值。</p><ul><li><code>true</code>或空字符串：内容可以编辑</li><li><code>false</code>：不可以编辑</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> contenteditable</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">鼠标点击，本句内容可修改。</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，鼠标单击句子，就可以进入编辑状态，用户可以改变句子的内容。当然，除非提交到服务器，否则刷新页面还是显示原来的内容。</p><p>该属性是枚举属性，不是布尔属性，规范的写法是最好带上属性值。</p><h3 id="spellcheck" tabindex="-1">spellcheck <a class="header-anchor" href="#spellcheck" aria-label="Permalink to &quot;spellcheck&quot;">​</a></h3><p>浏览器一般会自带拼写检查功能，编辑内容时，拼错的单词下面会显示红色的波浪线。<code>spellcheck</code>属性就表示，是否打开拼写检查。</p><p>它有两个可能的值。</p><ul><li><code>true</code>：打开拼写检查</li><li><code>false</code>：关闭拼写检查</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> contenteditable</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#B392F0;"> spellcheck</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">英语单词 separate 容易写错成 seperate。</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>seperate</code>下面会有提示，表示拼错了。</p><p>注意，由于该属性只在编辑时生效，所以这个例子必须加上<code>contenteditable</code>属性，表示本段内容可编辑。鼠标单击就可以进入编辑状态，这时才会看到拼写提示。不可编辑的状态下，拼写错误是不提示显示的。对于那些不可编辑的元素，该属性无效。</p><p>这个属性看上去像布尔属性，但是其实是枚举属性，所以最好不要省略它的值。如果没有指定这个属性，浏览器将自行决定是否打开拼写检查。</p><h3 id="data-属性" tabindex="-1"><code>data-</code>属性 <a class="header-anchor" href="#data-属性" aria-label="Permalink to &quot;\`data-\`属性&quot;">​</a></h3><p><code>data-</code>属性用于放置自定义数据。如果没有其他属性或元素合适放置数据，就可以放在<code>data-</code>属性。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tooltip&quot;</span><span style="color:#B392F0;"> data-tip</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;this is the tip!&quot;</span><span style="color:#E1E4E8;">&gt;链接&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面代码中，<code>data-tip</code>用于放置链接的提示文字。</p><p>由于<code>data-</code>属性只能通过 CSS 或 JavaScript 利用，所以这里不做详细介绍了。下面是 CSS 的例子。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">&lt;div data-role=&quot;mobile&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">Mobile only content</span></span>
<span class="line"><span style="color:#6A737D;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">data-role</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mobile&quot;</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#79B8FF;">  display</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">none</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">&lt;div class=&quot;test&quot; data-content=&quot;This is the div content&quot;&gt;test&lt;/div&gt;​</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#B392F0;">.test</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">inline-block</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.test:after</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  content</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">attr</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data-content</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="事件处理属性" tabindex="-1">事件处理属性 <a class="header-anchor" href="#事件处理属性" aria-label="Permalink to &quot;事件处理属性&quot;">​</a></h3><p>除了上面这些属性，全局属性还包括事件处理属性（event handler），用来响应用户的动作。这些属性的值都是 JavaScript 代码，请参考 JavaScript 教程，这里只列出这些属性的名单。</p><blockquote><p>onabort, onautocomplete, onautocompleteerror, onblur, oncancel, oncanplay, oncanplaythrough, onchange, onclick, onclose, oncontextmenu, oncuechange, ondblclick, ondrag, ondragend, ondragenter, ondragexit, ondragleave, ondragover, ondragstart, ondrop, ondurationchange, onemptied, onended, onerror, onfocus, oninput, oninvalid, onkeydown, onkeypress, onkeyup, onload, onloadeddata, onloadedmetadata, onloadstart, onmousedown, onmouseenter, onmouseleave, onmousemove, onmouseout, onmouseover, onmouseup, onmousewheel, onpause, onplay, onplaying, onprogress, onratechange, onreset, onresize, onscroll, onseeked, onseeking, onselect, onshow, onsort, onstalled, onsubmit, onsuspend, ontimeupdate, ontoggle, onvolumechange, onwaiting</p></blockquote>`,90)])])}const u=a(n,[["render",t]]);export{y as __pageData,u as default};
