import{_ as a,c as n,o as e,b as l}from"./chunks/framework.3z4p0y-m.js";const y=JSON.parse('{"title":"CSS 动画","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"过渡 (Transitions)","slug":"过渡-transitions","link":"#过渡-transitions","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"动画","slug":"动画","link":"#动画","children":[{"level":3,"title":"关键帧 (Keyframes)","slug":"关键帧-keyframes","link":"#关键帧-keyframes","children":[]},{"level":3,"title":"动画方向 (animation-direction)","slug":"动画方向-animation-direction","link":"#动画方向-animation-direction","children":[]},{"level":3,"title":"重复次数 (animation-iteration-count)","slug":"重复次数-animation-iteration-count","link":"#重复次数-animation-iteration-count","children":[]},{"level":3,"title":"填充模式 (animation-fill-mode)","slug":"填充模式-animation-fill-mode","link":"#填充模式-animation-fill-mode","children":[]},{"level":3,"title":"缓动函数 (Timing Functions)","slug":"缓动函数-timing-functions","link":"#缓动函数-timing-functions","children":[]}]}],"relativePath":"basic/css/animation.md","filePath":"basic/css/animation.md"}'),p={name:"basic/css/animation.md"};function i(o,s,t,c,r,d){return e(),n("div",null,[...s[0]||(s[0]=[l(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/css/animation.md for this page in Markdown format</div><h1 id="css-动画" tabindex="-1">CSS 动画 <a class="header-anchor" href="#css-动画" aria-label="Permalink to &quot;CSS 动画&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>CSS 动画允许元素在不同样式之间平滑过渡，无需使用 JavaScript。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>静态元素  →  [动画过程]  →  结束状态</span></span>
<span class="line"><span>   ↓            ↓           ↓</span></span>
<span class="line"><span>初始样式      中间状态      最终样式</span></span></code></pre></div><h2 id="过渡-transitions" tabindex="-1">过渡 (Transitions) <a class="header-anchor" href="#过渡-transitions" aria-label="Permalink to &quot;过渡 (Transitions)&quot;">​</a></h2><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>过渡动画在对应的样式改变时自动发生：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>元素状态变化（由js、css等引起）:</span></span>
<span class="line"><span>┌─────────────┐   过渡过程    ┌─────────────┐</span></span>
<span class="line"><span>│  样式 A      │ ──────────→ │  样式 B      │</span></span>
<span class="line"><span>│  color: red │              │ color: blue │</span></span>
<span class="line"><span>└─────────────┘              └─────────────┘</span></span></code></pre></div><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">.element</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: css-property duration timing-function delay, css-property2</span></span>
<span class="line"><span style="color:#E1E4E8;">      duration2 timing-function2 delay2;</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: margin-right </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease-in-out</span><span style="color:#79B8FF;"> 0.5</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h2><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">animation: name duration </span><span style="color:#85E89D;">timing-function</span><span style="color:#E1E4E8;"> delay </span><span style="color:#85E89D;">iteration-count</span><span style="color:#E1E4E8;"> direction</span></span>
<span class="line"><span style="color:#85E89D;">    fill-mode</span><span style="color:#E1E4E8;">, name2 duration2 </span><span style="color:#85E89D;">timing-functio2n</span><span style="color:#E1E4E8;"> delay2 </span><span style="color:#85E89D;">iteration-count2</span></span>
<span class="line"><span style="color:#E1E4E8;">    direction2 </span><span style="color:#85E89D;">fill-mode2</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h3 id="关键帧-keyframes" tabindex="-1">关键帧 (Keyframes) <a class="header-anchor" href="#关键帧-keyframes" aria-label="Permalink to &quot;关键帧 (Keyframes)&quot;">​</a></h3><p>关键帧动画通过定义多个关键点来控制动画序列：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>@keyframes 动画名称 {</span></span>
<span class="line"><span>  0% { /* 起始状态 */ }</span></span>
<span class="line"><span>  50% { /* 中间状态 */ }</span></span>
<span class="line"><span>  100% { /* 结束状态 */ }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>示例：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">@keyframes</span><span style="color:#FFAB70;"> bounce</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  0%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  50%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">-30</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  100%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>视觉表示：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>位置变化:</span></span>
<span class="line"><span>     50%: ↑ (-30px)</span></span>
<span class="line"><span>     ↗ ↘</span></span>
<span class="line"><span>0%: ○    ○: 100%</span></span></code></pre></div><h3 id="动画方向-animation-direction" tabindex="-1">动画方向 (animation-direction) <a class="header-anchor" href="#动画方向-animation-direction" aria-label="Permalink to &quot;动画方向 (animation-direction)&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>normal (正常):</span></span>
<span class="line"><span>0% → 25% → 50% → 75% → 100% → 结束</span></span>
<span class="line"><span></span></span>
<span class="line"><span>reverse (反向):</span></span>
<span class="line"><span>100% → 75% → 50% → 25% → 0% → 结束</span></span>
<span class="line"><span></span></span>
<span class="line"><span>alternate (交替):</span></span>
<span class="line"><span>0% → 100% → 0% → 100% → ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>alternate-reverse (反向交替):</span></span>
<span class="line"><span>100% → 0% → 100% → 0% → ...</span></span></code></pre></div><h3 id="重复次数-animation-iteration-count" tabindex="-1">重复次数 (animation-iteration-count) <a class="header-anchor" href="#重复次数-animation-iteration-count" aria-label="Permalink to &quot;重复次数 (animation-iteration-count)&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>animation-iteration-count: 1</span></span>
<span class="line"><span>[======] 播放一次结束</span></span>
<span class="line"><span></span></span>
<span class="line"><span>animation-iteration-count: 3</span></span>
<span class="line"><span>[======][======][======] 播放三次结束</span></span>
<span class="line"><span></span></span>
<span class="line"><span>animation-iteration-count: infinite</span></span>
<span class="line"><span>[======][======][======][======]... 无限循环</span></span></code></pre></div><h3 id="填充模式-animation-fill-mode" tabindex="-1">填充模式 (animation-fill-mode) <a class="header-anchor" href="#填充模式-animation-fill-mode" aria-label="Permalink to &quot;填充模式 (animation-fill-mode)&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>none:</span></span>
<span class="line"><span>开始前: 初始样式</span></span>
<span class="line"><span>结束后: 回到初始样式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>forwards:</span></span>
<span class="line"><span>开始前: 初始样式</span></span>
<span class="line"><span>结束后: 保持最后帧样式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>backwards:</span></span>
<span class="line"><span>开始前: 应用第一帧样式</span></span>
<span class="line"><span>结束后: 回到初始样式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>both:</span></span>
<span class="line"><span>开始前: 应用第一帧样式</span></span>
<span class="line"><span>结束后: 保持最后帧样式</span></span></code></pre></div><h3 id="缓动函数-timing-functions" tabindex="-1">缓动函数 (Timing Functions) <a class="header-anchor" href="#缓动函数-timing-functions" aria-label="Permalink to &quot;缓动函数 (Timing Functions)&quot;">​</a></h3><p><code>transition-timing-function</code> 属性定义了过渡效果中速度变化的方式，控制动画在不同时间点的执行速度。</p><h4 id="ease-默认值" tabindex="-1">ease (默认值) <a class="header-anchor" href="#ease-默认值" aria-label="Permalink to &quot;ease (默认值)&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 速度:     慢---快---慢 */</span></span>
<span class="line"><span style="color:#6A737D;">/* 相当于 cubic-bezier(0.25, 0.1, 0.25, 1.0) */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: ease;</span></span></code></pre></div><h4 id="linear" tabindex="-1">linear <a class="header-anchor" href="#linear" aria-label="Permalink to &quot;linear&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 匀速 */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: linear;</span></span></code></pre></div><h4 id="ease-in" tabindex="-1">ease-in <a class="header-anchor" href="#ease-in" aria-label="Permalink to &quot;ease-in&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 速度:     慢---快 */</span></span>
<span class="line"><span style="color:#6A737D;">/* 相当于 cubic-bezier(0.42, 0, 1.0, 1.0) */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: </span><span style="color:#85E89D;">ease-in</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h4 id="ease-out" tabindex="-1">ease-out <a class="header-anchor" href="#ease-out" aria-label="Permalink to &quot;ease-out&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 速度:     快---慢 */</span></span>
<span class="line"><span style="color:#6A737D;">/* 相当于 cubic-bezier(0, 0, 0.58, 1.0) */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: </span><span style="color:#85E89D;">ease-out</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h4 id="ease-in-out" tabindex="-1">ease-in-out <a class="header-anchor" href="#ease-in-out" aria-label="Permalink to &quot;ease-in-out&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 速度:     慢---快---慢 */</span></span>
<span class="line"><span style="color:#6A737D;">/* 相当于 cubic-bezier(0.42, 0, 0.58, 1.0) */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: </span><span style="color:#85E89D;">ease-in-out</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h4 id="step-start" tabindex="-1">step-start <a class="header-anchor" href="#step-start" aria-label="Permalink to &quot;step-start&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * 效果：立即跳到结束状态</span></span>
<span class="line"><span style="color:#6A737D;"> * 进度:     0% → 100% (瞬间完成)------- 100%</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: </span><span style="color:#85E89D;">step-start</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h4 id="step-end" tabindex="-1">step-end <a class="header-anchor" href="#step-end" aria-label="Permalink to &quot;step-end&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 效果：在过渡结束时瞬间完成</span></span>
<span class="line"><span style="color:#6A737D;"> * 进度:     0% --------0% → 100% (瞬间完成)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: </span><span style="color:#85E89D;">step-end</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h4 id="steps" tabindex="-1">steps() <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;steps()&quot;">​</a></h4><p><code>steps()</code> 是 CSS <code>transition-timing-function</code> 属性的一个特殊函数，它允许将动画或过渡分成若干个离散的步骤，而不是平滑的连续变化。这种函数常用于创建逐帧动画或模拟数字效果。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * n：正整数，表示动画被分成的步骤数量</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;jumpterm&gt;：可选参数，定义步骤变化发生的时机，可以是以下值之：</span></span>
<span class="line"><span style="color:#6A737D;"> *   jump-end 或 end（默认值）</span></span>
<span class="line"><span style="color:#6A737D;"> *   jump-start 或 start</span></span>
<span class="line"><span style="color:#6A737D;"> *   jump-none</span></span>
<span class="line"><span style="color:#6A737D;"> *   jump-both</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: steps(n, &lt;jumpterm</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>效果对比</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>steps(5, jumpterm)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>时间轴:       0% ---- 25% ---- 50% ---- 75% ---- 100%</span></span>
<span class="line"><span>end:         A ---- B ---- C ---- D ---- E ····          跳过结束</span></span>
<span class="line"><span>start:         ····  A ---- B ---- C ---- D ---- E       跳过开始</span></span>
<span class="line"><span>jump-both:     ····  A -- B -- C -- D -- E  ····         跳过开始、结束</span></span>
<span class="line"><span>jump-none:   A  ----  B  ----  C  ----  D  ----  E       不跳过</span></span>
<span class="line"><span>             ↑               ↑                   ↑</span></span>
<span class="line"><span>            开始             变化点               结束</span></span></code></pre></div><h4 id="cubic-bezier" tabindex="-1">cubic-bezier() <a class="header-anchor" href="#cubic-bezier" aria-label="Permalink to &quot;cubic-bezier()&quot;">​</a></h4><p>cubic-bezier 函数定义了一个贝塞尔曲线，该曲线描述了动画的速度随时间的变化。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * x1, x2 ∈ [0, 1]</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#85E89D;">transition-timing-function</span><span style="color:#E1E4E8;">: cubic-bezier(x1, y1, x2, y2);</span></span></code></pre></div><p>由于贝塞尔曲线复杂，难以直观描述，<a href="https://cubic-bezier.com" target="_blank" rel="noreferrer">可以进入 cubic-bezier.com 进行在线调试</a></p>`,51)])])}const h=a(p,[["render",i]]);export{y as __pageData,h as default};
