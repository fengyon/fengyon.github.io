import{_ as a,c as n,o as p,b as o}from"./chunks/framework.3z4p0y-m.js";const d=JSON.parse('{"title":"URL Pattern API","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"构造函数 URLPattern()","slug":"构造函数-urlpattern","link":"#构造函数-urlpattern","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"模式写法","slug":"模式写法","link":"#模式写法","children":[]}]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"exec()","slug":"exec","link":"#exec","children":[]},{"level":3,"title":"test()","slug":"test","link":"#test","children":[]}]}],"relativePath":"basic/webapi/urlpattern.md","filePath":"basic/webapi/urlpattern.md"}'),l={name:"basic/webapi/urlpattern.md"};function e(t,s,c,r,E,y){return p(),n("div",null,[...s[0]||(s[0]=[o(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /basic/webapi/urlpattern.md for this page in Markdown format</div><h1 id="url-pattern-api" tabindex="-1">URL Pattern API <a class="header-anchor" href="#url-pattern-api" aria-label="Permalink to &quot;URL Pattern API&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>URL Pattern API 基于正则表达式和通配符，对 URL 进行匹配和解析。</p><p>它提供一个构造函数<code>URLPattern()</code>，用于新建一个 URL 模式实例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(input);</span></span></code></pre></div><p>有了模式实例，就可以知道某个 URL 是否符合该模式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/books&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面示例中，模式实例是 包含<code>/books</code>路径的 URL，实例方法<code>test()</code>用来检测指定网址是否符合该模式，结果为<code>true</code>。</p><p>URL Pattern 支持多种协议，不仅是 HTTP 协议。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">:foo*&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面示例中，URL Pattern 新建了一个 Data 协议的模式。</p><h2 id="构造函数-urlpattern" tabindex="-1">构造函数 URLPattern() <a class="header-anchor" href="#构造函数-urlpattern" aria-label="Permalink to &quot;构造函数 URLPattern()&quot;">​</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p>构造函数<code>URLPattern()</code>用于新建一个 URL 模式实例。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(input);</span></span></code></pre></div><p>该构造函数的参数<code>input</code>是一个模式字符串或者模式对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/:id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#6A737D;">//   hasRegExpGroups: false,</span></span>
<span class="line"><span style="color:#6A737D;">//   hash: &quot;*&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   hostname: &quot;example.com&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   password: &quot;*&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   pathname: &quot;/books/:id&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   port: &quot;&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   protocol: &quot;https&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   search: &quot;*&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   username: &quot;*&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//   ...</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div><p>上面示例中，参数<code>https://example.com/books/:id</code>就是一个模式字符串，执行后返回一个 URLPattern 实例对象，包含模式的各个组成部分。</p><p>参数<code>input</code>也可以写成一个对象，用属性指定模式 URL 的每个部分。也就是说，模式对象可以有以下属性。</p><ul><li>protocol</li><li>username</li><li>password</li><li>hostname</li><li>port</li><li>pathname</li><li>search</li><li>hash</li><li>baseURL</li></ul><p>上面的示例，如果参数改成模式对象，就是下面这样。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  protocol: </span><span style="color:#9ECBFF;">&#39;https&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&#39;example.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&#39;/books/:id&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>模式字符串或者模式对象之中，没有定义的部分，默认为<code>*</code>，表示所有可能的字符，包括零字符的情况。</p><p><code>URLPattern()</code>正常情况下将返回一个 URLPattern 实例对象，但是遇到参数无效或语法不正确，则会报错。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><p>上面示例中，参数<code>123</code>不是一个有效的 URL 模式，就报错了。</p><p>需要注意的是，如果模式字符串为相对路径，那么<code>URLPattern()</code>还需要第二个参数，用来指定基准 URL。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(input, baseURL)</span></span></code></pre></div><p>上面代码中，第二个参数<code>baseURL</code>就是基准 URL。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/books/:id&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/books/:id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;https://example.com&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 正确</span></span></code></pre></div><p>上面示例中，第一个参数<code>/books/:id</code>是一个相对路径，这时就需要第二个参数<code>https://example.com</code>，用来指定基准 URL，否则报错。</p><p>但是，如果参数为模式对象，则可以只指定 URL 模式的某个部分。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&#39;/books/:id&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span><span style="color:#6A737D;">// 正确</span></span></code></pre></div><p>上面示例中，参数是一个模式对象，那么参数允许只指定 URL 的部分模式。</p><p>模式对象里面，也可以指定基准 URL。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern4 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/books/:id&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  baseURL: </span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>基准 URL 必须是合法的 URL，不能包含模式。</p><p>注意，如果用了模式对象，就不能使用基准 URL 作为第二个参数，这样会报错。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&quot;https://example.com/baz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><p>上面示例中，同时使用了模式对象和第二个参数，结果就报错了。</p><p><code>URLpattern()</code>还可以加入配置对象参数，用于定制匹配行为。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(input, options)</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(input, baseURL, options)</span></span></code></pre></div><p>上面代码中，参数<code>options</code>就是一个配置对象。</p><p>目前，这个配置对象<code>options</code>只有<code>ignoreCase</code>一个属性，如果设为<code>true</code>，将不区分大小写，默认值为<code>false</code>，表示区分大小写。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(input, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ignoreCase: </span><span style="color:#79B8FF;">false</span><span style="color:#6A737D;"> // 默认值，区分大小写</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>请看下面的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/2022/feb/*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/2022/feb/xc44rsz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/2022/Feb/xc44rsz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>上面示例，默认匹配时，会区分<code>feb</code>和<code>Feb</code>。</p><p>我们可以用<code>ignoreCase</code>将其关闭。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;https://example.com/2022/feb/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {  ignoreCase: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/2022/feb/xc44rsz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/2022/Feb/xc44rsz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="模式写法" tabindex="-1">模式写法 <a class="header-anchor" href="#模式写法" aria-label="Permalink to &quot;模式写法&quot;">​</a></h3><p>模式字符串基本上采用正则表达式的写法，但是不是所有的正则语法都支持，比如先行断言和后行断言就不支持。</p><p>（1）普通字符</p><p>如果都是普通字符，就表示原样匹配。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> p</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面代码就表示确切匹配路径<code>https://example.com/abc</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abcd&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc/&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc?123&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//true</span></span></code></pre></div><p>上面示例中，URL 必须严格匹配路径<code>https://example.com/abc</code>，即使尾部多一个斜杠都不行，但是加上查询字符串是可以的。</p><p>（2）<code>?</code></p><p>量词字符<code>?</code>表示前面的字符串，可以出现0次或1次，即该部分可选。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  protocol: </span><span style="color:#9ECBFF;">&quot;http{s}?&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面示例中，<code>{s}?</code>表示字符组<code>s</code>可以出现0次或1次。</p><p><code>?</code>不包括路径的分隔符<code>/</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/books/:id?&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123/456&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123/456/789&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123/456/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>上面示例中，<code>?</code>不能匹配网址结尾的斜杠。</p><p>如果一定要匹配，可以把结尾的斜杠放在<code>{}</code>里面。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/product{/}?&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/product&quot;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/product/&quot;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面示例中，不管网址有没有结尾的斜杠，<code>{/}?</code>都会成功匹配。</p><p>（3）<code>+</code></p><p>量词字符<code>+</code>表示前面的字符串出现1次或多次。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/books/(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>上面示例中，<code>\\\\d+</code>表示1个或多个数字，其中的<code>\\d</code>是一个内置的字符类，表示0-9的数字，因为放在双引号里面，所以反斜杠前面还要再加一个反斜杠进行转义。</p><p><code>+</code>可以包括<code>/</code>分隔的路径的多个部分，但不包括路径结尾的斜杠。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/books/:id+&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123/456&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123/456/789&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123/456/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>（4）<code>*</code></p><p>量词字符<code>*</code>表示出现零次或多次。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/{abc}*&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc/&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abcabc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc/abc/abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>上面示例中，<code>{abc}*</code>表示<code>abc</code>出现零次或多次，也不包括路径分隔符<code>/</code>。</p><p>如果<code>*</code>前面没有任何字符，就表示所有字符，包括零字符的情况，也包括分隔符<code>/</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  search: </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  hash: </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面示例中，<code>*</code>表示匹配所有字符，包括零字符。</p><p>下面是另一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/*.png&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/image.png&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/image.png/123&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/folder/image.png&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/.png&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><code>*</code>匹配的部分可以从对应部分的数字属性上获取。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/foo/*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com/baz&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">result.pathname.input </span><span style="color:#6A737D;">// &#39;/foo/bar&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">result.pathname.groups[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// &#39;bar&#39;</span></span></code></pre></div><p>上面示例中，<code>*</code>的匹配结果可以从<code>pathname.groups[0]</code>获取。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ hostname: </span><span style="color:#9ECBFF;">&quot;*.example.com&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">({ hostname: </span><span style="color:#9ECBFF;">&quot;cdn.example.com&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">result.hostname.groups[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// &#39;cdn&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">result.hostname.input </span><span style="color:#6A737D;">// &#39;cdn.example.com&#39;</span></span></code></pre></div><p>上面示例中，<code>*</code>的匹配结果可以从<code>hostname.groups[0]</code>获取。</p><p>（5）<code>{}</code></p><p>特殊字符<code>{}</code>用来定义量词<code>?</code>、<code>+</code>、<code>+</code>的生效范围。</p><p>如果<code>{}</code>后面没有量词，那就跟没有使用的效果一样。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/{abc}&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>（6）<code>()</code></p><p>特殊字符<code>()</code>用来定义一个组匹配，匹配结果可以按照出现顺序的编号，从<code>pathname.groups</code>对象上获取。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/books/(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+)&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123&quot;</span><span style="color:#E1E4E8;">).pathname.groups</span></span>
<span class="line"><span style="color:#6A737D;">// { &#39;0&#39;: &#39;123&#39; }</span></span></code></pre></div><p>上面示例中，<code>(\\\\d+)</code>是一个组匹配，因为它是第一个组匹配，所以匹配结果放在<code>pathname.groups</code>的属性<code>0</code>。</p><p>（7）<code>|</code></p><p>特殊字符<code>|</code>表示左右两侧的字符，都可以出现，即表示逻辑<code>OR</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#9ECBFF;">&quot;(80|443)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面示例中，<code>(80|443)</code>表示80或者443都可以。</p><p>（8）<code>:</code></p><p>特殊字符<code>:</code>用来定义一个具名组匹配，后面跟着变量名。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/:path&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面示例中，<code>/:path</code>表示斜杠后面的部分，都被捕捉放入变量<code>path</code>，可以从匹配结果的<code>pathname.groups</code>上的对应属性获取。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/books/:id&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123&quot;</span><span style="color:#E1E4E8;">).pathname.groups</span></span>
<span class="line"><span style="color:#6A737D;">// { id: &#39;123&#39; }</span></span></code></pre></div><p>上面示例中，<code>pathname.groups</code>返回一个对象，该对象的属性就是所有捕捉成功的组变量，上例是<code>id</code>。</p><p>下面是另一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/:product/:user/:action&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/store/wanderview/view&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">result.pathname.groups.product </span><span style="color:#6A737D;">// &#39;store&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">result.pathname.groups.user </span><span style="color:#6A737D;">// &#39;wanderview&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">result.pathname.groups.action </span><span style="color:#6A737D;">// &#39;view&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">result.pathname.input </span><span style="color:#6A737D;">// &#39;/store/wanderview/view&#39;</span></span></code></pre></div><p>上面示例中，<code>:product</code>、<code>:user</code>、<code>:action</code>的匹配结果，都可以从<code>pathname.groups</code>的对应属性上获取。</p><p>组匹配可以放在模式的前面。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;/books/:id(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;https://example.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>上面示例中，组匹配<code>:id</code>后面跟着模型定义<code>\\\\d+</code>，模式需要放在括号里面。</p><p><strong>（9）特殊字符转义</strong></p><p>如果要将特殊字符当作普通字符使用，必须在其前面加入双重反斜杠进行转义。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern1 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/a:b&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pattern2 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/a</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">:b&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>上面示例中，<code>a:b</code>表示路径以字符<code>a</code>开头，后面的部分都放入变量<code>b</code>。而<code>a\\\\:b</code>表示路径本身就是<code>a:b</code>就是。</p><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><p>URLPattern 实例的属性对应<code>URLPattern()</code>模式对象参数的各个部分。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;{*.}?example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.hostname </span><span style="color:#6A737D;">// &#39;{*.}?example.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.protocol </span><span style="color:#6A737D;">// &#39;*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.username </span><span style="color:#6A737D;">// &#39;*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.password </span><span style="color:#6A737D;">// &#39;*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.port </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.pathname </span><span style="color:#6A737D;">// &#39;*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.search </span><span style="color:#6A737D;">// &#39;*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.hash </span><span style="color:#6A737D;">// &#39;*&#39;</span></span></code></pre></div><p>上面示例中，<code>pattern</code>是一个实例对象，它的属性与<code>URLPattern()</code>的参数对象的属性一致。</p><p>注意，<code>search</code>不包括开头的<code>?</code>，<code>hash</code>不包括开头的<code>#</code>，但是<code>pathname</code>包括开头的<code>/</code>。</p><p>下面是另一个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://cdn-*.example.com/*.jpg&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.protocol </span><span style="color:#6A737D;">// &#39;https&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.hostname </span><span style="color:#6A737D;">// &#39;cdn-*.example.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.pathname </span><span style="color:#6A737D;">// &#39;/*.jpg&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.username </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.password </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.search </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.hash </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="exec" tabindex="-1">exec() <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;exec()&quot;">​</a></h3><p>实例的<code>exec()</code>方法，把模式用于解析参数网址，返回匹配结果。</p><p><code>exec()</code>方法的参数与<code>new URLPattern()</code>是一致的。它可以是一个 URL 字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://store.example.com/books/123&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>如果第一个参数是相对 URL，那么需要基准 URL，作为第二个参数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com/baz&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p><code>exec()</code>方法的参数，也可以是一个对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  protocol: </span><span style="color:#9ECBFF;">&quot;https&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;store.example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/books/123&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>如果匹配成功，它返回一个包括匹配结果的对象。如果匹配失败，返回<code>null</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http{s}?://*.example.com/books/:id&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://example.com/books/123&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// null</span></span></code></pre></div><p>上面示例中，匹配失败返回<code>null</code>。</p><p>匹配成功返回的对象，有一个<code>inputs</code>属性，包含传入<code>pattern.exec()</code>的参数数组。其他属性的值也是一个对象，该对象的<code>input</code>属性对应传入值，<code>groups</code>属性包含各个组匹配。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http{s}?://*.example.com/books/:id&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://store.example.com/books/123&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">match.inputs </span><span style="color:#6A737D;">// [&#39;https://store.example.com/books/123&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">match.protocol </span><span style="color:#6A737D;">// { input: &quot;https&quot;, groups: {} }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.username </span><span style="color:#6A737D;">// { input: &quot;&quot;, groups: {} }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.password </span><span style="color:#6A737D;">// { input: &quot;&quot;, groups: {} }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.hostname </span><span style="color:#6A737D;">// { input: &quot;store.example.com&quot;, groups: { &quot;0&quot;: &quot;store&quot; } }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.port </span><span style="color:#6A737D;">// { input: &quot;&quot;, groups: {} }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.pathname </span><span style="color:#6A737D;">// { input: &quot;/books/123&quot;, groups: { &quot;id&quot;: &quot;123&quot; } }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.search </span><span style="color:#6A737D;">// { input: &quot;&quot;, groups: {} }</span></span>
<span class="line"><span style="color:#E1E4E8;">match.hash </span><span style="color:#6A737D;">// { input: &quot;&quot;, groups: {} }</span></span></code></pre></div><h3 id="test" tabindex="-1">test() <a class="header-anchor" href="#test" aria-label="Permalink to &quot;test()&quot;">​</a></h3><p>实例的<code>test()</code>方法，用来检测参数网址是否符合当前模式。</p><p>它的参数跟<code>URLPattern()</code>是一样的，可以是模式字符串，也可以是模式对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pattern</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URLPattern</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/foo/*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  pathname: </span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  baseURL: </span><span style="color:#9ECBFF;">&quot;https://example.com/baz&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;https://example.com/baz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>正常情况下，它返回一个布尔值。但是，如果语法不合法，它也会抛错。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">pattern.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">({ pathname: </span><span style="color:#9ECBFF;">&quot;/foo/bar&quot;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&quot;https://example.com/baz&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div>`,144)])])}const u=a(l,[["render",e]]);export{d as __pageData,u as default};
